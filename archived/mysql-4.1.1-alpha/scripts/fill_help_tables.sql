delete from help_topic;
delete from help_category;
delete from help_keyword;
delete from help_relation;

insert into help_category (help_category_id,name,parent_category_id) values (0,"Polygon properties",23),(1,"Column Types",15),(2,"Geometry constructors",23),(3,"WKT",23),(4,"Numeric Functions",21),(5,"GeometryCollection properties",23),(6,"Data Manipulation",15),(7,"Administration",15),(8,"MBR",23),(9,"Control flow functions",21),(10,"Transactions",15),(11,"Geometry relations",23),(12,"Functions and Modifiers for Use with GROUP BY Clauses",21),(13,"WKB",23),(14,"Date and Time Functions",21);
insert into help_category (help_category_id,name,parent_category_id) values (15,"Contents",-1),(16,"Point properties",23),(17,"LineString properties",23),(18,"Geometry properties",23),(19,"Logical operators",21),(20,"Miscellaneous Functions",21),(21,"Functions",15),(22,"String Functions",21),(23,"Geographic features",15),(24,"Comparison operators",21),(25,"Bit Functions",21),(26,"Data Definition",15),(27,"Recovery",15);

insert into help_topic (help_topic_id,help_category_id,name,description,example) values (0,6,"JOIN","MySQL supports the following JOIN syntaxes for use in\nSELECT statements:\n\ntable_reference, table_reference\ntable_reference [INNER | CROSS] JOIN table_reference [join_condition]\ntable_reference STRAIGHT_JOIN table_reference\ntable_reference LEFT [OUTER] JOIN table_reference [join_condition]\ntable_reference NATURAL [LEFT [OUTER]] JOIN table_reference\n{ OJ table_reference LEFT OUTER JOIN table_reference ON conditional_expr }\ntable_reference RIGHT [OUTER] JOIN table_reference [join_condition]\ntable_reference NATURAL [RIGHT [OUTER]] JOIN table_reference\n\nWhere table_reference is defined as:\ntable_name [[AS] alias] [[USE INDEX (key_list)] | [IGNORE INDEX (key_list)] | [FORCE INDEX (key_list)]]\n\nand join_condition is defined as:\n\nON conditional_expr |\nUSING (column_list)\n","mysql> SELECT table1.* FROM table1\n    ->        LEFT JOIN table2 ON table1.id=table2.id\n    ->        WHERE table2.id IS NULL;"),(1,22,"HEX","   HEX(N_or_S)\n\nIf N_OR_S is a number, returns a string representation of the hexadecimal\nvalue of N, where N is a longlong (BIGINT) number.\nThis is equivalent to CONV(N,10,16).\n\nIf N_OR_S is a string, returns a hexadecimal string of N_OR_S where each\ncharacter in N_OR_S is converted to 2 hexadecimal digits. This is the\ninverse of the 0xff strings.\n","mysql> SELECT HEX(255);\n        -> 'FF'\nmysql> SELECT HEX(\"abc\");\n        -> 616263\nmysql> SELECT 0x616263;\n        -> \"abc\""),(2,22,"REPEAT","   REPEAT(str,count)\nReturns a string consisting of the string str repeated count\ntimes. If count <= 0, returns an empty string. Returns NULL if\nstr or count are NULL:\n","mysql> SELECT REPEAT('MySQL', 3);\n        -> 'MySQLMySQLMySQL'"),(3,22,"REPLACE","   REPLACE(str,from_str,to_str)\nReturns the string str with all occurrences of the string\nfrom_str replaced by the string to_str:\n","mysql> SELECT REPLACE('www.mysql.com', 'w', 'Ww');\n        -> 'WwWwWw.mysql.com'"),(4,11,"CONTAINS","   Contains(g1,g2)\nReturns 1 or 0 to indicate whether or not g1 completely contains\ng2.\n",""),(5,18,"SRID","   SRID(g)\nReturns an integer indicating the Spatial Reference System ID for the geometry\nvalue g.\n","mysql> SELECT SRID(GeomFromText('LineString(1 1,2 2)',101));\n+-----------------------------------------------+\n| SRID(GeomFromText('LineString(1 1,2 2)',101)) |\n+-----------------------------------------------+\n|                                           101 |\n+-----------------------------------------------+"),(6,14,"CURRENT_TIMESTAMP","   NOW()\n   SYSDATE()\n   CURRENT_TIMESTAMP\n   CURRENT_TIMESTAMP()\n   LOCALTIME\n   LOCALTIME()\n   LOCALTIMESTAMP\n   LOCALTIMESTAMP()\nReturns the current date and time as a value in 'YYYY-MM-DD HH:MM:SS'\nor YYYYMMDDHHMMSS format, depending on whether the function is used in\na string or numeric context:\n","mysql> SELECT NOW();\n        -> '1997-12-15 23:50:26'\nmysql> SELECT NOW() + 0;\n        -> 19971215235026"),(7,12,"VARIANCE","   VARIANCE(expr)\nReturns the standard variance of expr (considering rows as the\nwhole population, not as a sample; so it has the number of rows as\ndenominator). This is an extension to \nSQL-99 (available only in version 4.1 or later).\n",""),(8,22,"CONCAT","   CONCAT(str1,str2,...)\nReturns the string that results from concatenating the arguments.  Returns\nNULL if any argument is NULL.  May have more than 2 arguments.\nA numeric argument is converted to its equivalent string form:\n","mysql> SELECT CONCAT('My', 'S', 'QL');\n        -> 'MySQL'\nmysql> SELECT CONCAT('My', NULL, 'QL');\n        -> NULL\nmysql> SELECT CONCAT(14.3);\n        -> '14.3'"),(9,23,"GEOMETRY HIERARCHY","Geometry is the base class. It's an abstract class.\nThe instantiable subclasses of Geometry are restricted to zero-, one-,\nand two-dimensional geometric objects that exist in\ntwo-dimensional coordinate space. All instantiable geometry classes are\ndefined so that valid instances of a geometry class are topologically closed\n(that is, all defined geometries include their boundary).\n\nThe base Geometry class has subclasses for Point,\nCurve, Surface and GeometryCollection:\n\n\n --- Point represents zero-dimensional objects.\n\n --- Curve represents one-dimensional objects, and has subclass\nLineString, with sub-subclasses Line and LinearRing.\n\n --- Surface is designed for two-dimensional objects and\nhas subclass Polygon.\n\n --- GeometryCollection\nhas specialised zero-, one-, and two-dimensional collection classes named \nMultiPoint, MultiLineString, and MultiPolygon\nfor modelling geometries corresponding to collections of\nPoints, LineStrings, and Polygons, respectively.\nMultiCurve and MultiSurface are introduced as abstract superclasses\nthat generalise the collection interfaces to handle Curves and Surfaces.\n\n\nGeometry, Curve, Surface, MultiCurve,\nand MultiSurface are defined as non-instantiable classes.\nThey define a common set of methods for their subclasses and\nare included for the reason of extensibility.\n\nPoint, LineString, Polygon, GeometryCollection,\nMultiPoint, MultiLineString, and\nMultiPolygon are instantiable classes.\n",""),(10,22,"CHAR FUNCTION","   CHAR(N,...)\nCHAR() interprets the arguments as integers and returns a string\nconsisting of the characters given by the ASCII code values of those\nintegers. NULL values are skipped:\n","mysql> SELECT CHAR(77,121,83,81,'76');\n        -> 'MySQL'\nmysql> SELECT CHAR(77,77.3,'77.3');\n        -> 'MMM'"),(11,1,"DATETIME","A date and time combination.  The supported range is '1000-01-01\n00:00:00' to '9999-12-31 23:59:59'.  MySQL displays\nDATETIME values in 'YYYY-MM-DD HH:MM:SS' format, but allows you\nto assign values to DATETIME columns using either strings or numbers.\n",""),(12,22,"LOWER","   LCASE(str)\n   LOWER(str)\nReturns the string str with all characters changed to lowercase\naccording to the current character set mapping (the default is ISO-8859-1\nLatin1):\n","mysql> SELECT LCASE('QUADRATICALLY');\n        -> 'quadratically'"),(13,14,"MONTH","   MONTH(date)\nReturns the month for date, in the range 1 to 12:\n","mysql> SELECT MONTH('1998-02-03');\n        -> 2"),(14,1,"TINYINT","   TINYINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA very small integer. The signed range is -128 to 127. The\nunsigned range is 0 to 255.\n\n   BIT\n   BOOL\n   BOOLEAN\nThese are synonyms for TINYINT(1).\nThe BOOLEAN synonym was added in version 4.1.0\n\nFull boolean type handling will be introduced in accordance with SQL-99.\n","");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (15,17,"ISCLOSED","   IsClosed(ls)\nReturns 1 if the LineString value ls is closed\n(that is, it sStartPoint() and EndPoint() values are the same).\nReturns 0 if ls is not closed, and @minus{}1 if it is NULL.\n","mysql> SELECT IsClosed(GeomFromText('LineString(1 1,2 2,3 3)'));\n+---------------------------------------------------+\n| IsClosed(GeomFromText('LineString(1 1,2 2,3 3)')) |\n+---------------------------------------------------+\n|                                                 0 |\n+---------------------------------------------------+"),(16,20,"MASTER_POS_WAIT","   MASTER_POS_WAIT(log_name, log_pos [, timeout])\n\nBlocks until the slave reaches (that is, has read and applied all updates up\nto) the specified position in the master log. If master information is\nnot initialised, or if the arguments are incorrect, returns\nNULL. If the slave is not running, will block and wait until it\nis started and goes to or past the specified position. If the slave is\nalready past the specified position, returns immediately.\n\nIf timeout (new in 4.0.10) is specified, will give up waiting\nwhen timeout seconds have elapsed. timeout must be greater\nthan 0; a zero or negative timeout means no timeout.  The return\nvalue is the number of log events it had to wait to get to the specified\nposition, or NULL in case of error, or -1 if the timeout\nhas been exceeded.\n\nThis command is useful for control of master/slave synchronisation.\n","SELECT MASTER_POS_WAIT('master_log_file', master_log_pos)"),(17,25,"^","   ^\nBitwise XOR\n","mysql> SELECT 1 ^ 1;\n        -> 0\nmysql> SELECT 1 ^ 0;\n        -> 1\nmysql> SELECT 11 ^ 3;\n        -> 8"),(18,1,"BLOB TYPE TEXT BLOB","   BLOB\n   TEXT\n\nA BLOB or TEXT column with a maximum length of 65535 (2^16 - 1)\ncharacters. See also : [Silent column changes]. See also : [BLOB].\n",""),(19,14,"DATE OPERATIONS","   DATE_ADD(date,INTERVAL expr type)\n   DATE_SUB(date,INTERVAL expr type)\n\nThese functions perform date arithmetic.\n\nAs of MySQL Version 3.23, INTERVAL expr type is allowed on either\nside of the + operator if the expression on the other side is a\ndate or datetime value.\nFor the - operator, INTERVAL expr type is allowed only on\nthe right side, because\nit makes no sense to subtract a date or datetime value from an interval.\n(See examples below.)\n\ndate is a DATETIME or DATE value specifying the starting\ndate.  expr is an expression specifying the interval value to be added\nor subtracted from the starting date.  expr is a string; it may start\nwith a - for negative intervals.  type is a keyword indicating\nhow the expression should be interpreted.\n","mysql> SELECT '1997-12-31 23:59:59' + INTERVAL 1 SECOND;\n        -> '1998-01-01 00:00:00'\nmysql> SELECT INTERVAL 1 DAY + '1997-12-31';\n        -> '1998-01-01'\nmysql> SELECT '1998-01-01' - INTERVAL 1 SECOND;\n        -> '1997-12-31 23:59:59'\nmysql> SELECT DATE_ADD('1997-12-31 23:59:59',\n    ->                 INTERVAL 1 SECOND);\n        -> '1998-01-01 00:00:00'\nmysql> SELECT DATE_ADD('1997-12-31 23:59:59',\n    ->                 INTERVAL 1 DAY);\n        -> '1998-01-01 23:59:59'\nmysql> SELECT DATE_ADD('1997-12-31 23:59:59',\n    ->                 INTERVAL '1:1' MINUTE_SECOND);\n        -> '1998-01-01 00:01:00'\nmysql> SELECT DATE_SUB('1998-01-01 00:00:00',\n    ->                 INTERVAL '1 1:1:1' DAY_SECOND);\n        -> '1997-12-30 22:58:59'\nmysql> SELECT DATE_ADD('1998-01-01 00:00:00',\n    ->                 INTERVAL '-1 10' DAY_HOUR);\n        -> '1997-12-30 14:00:00'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\nmysql> SELECT DATE_ADD('1992-12-31 23:59:59.000002',\n    ->                 INTERVAL '1.999999' SECOND_MICROSECOND);\n        -> '1993-01-01 00:00:01.000001'"),(20,11,"WITHIN","   Within(g1,g2)\nReturns 1 or 0 to indicate whether or not g1 is spatially within\ng2.\n",""),(21,14,"WEEK","   WEEK(date)\n   WEEK(date,start)\nWith a single argument, returns the week for date, in the range\n0 to 53 (yes, there may be the beginnings of a week 53),\nfor locations where Sunday is the first day of the week.  The\ntwo-argument form of WEEK() allows you to specify whether the\nweek starts on Sunday or Monday and whether the return value should be in\nthe range 0-53 or 1-52.\n\nThe following table demonstrates how the start argument works:\n\n     Value 	 Meaning\n   0 	 Week starts on Sunday; return value range is 0 to 53\n   1 	 Week starts on Monday; return value range is 0 to 53\n   2 	 Week starts on Sunday; return value range is 1 to 53\n   3 	 Week starts on Monday; return value range is 1 to 53 (ISO 8601)\n  \n\nThe start value of 3 can be used as of MySQL 4.0.5.\n","mysql> SELECT WEEK('1998-02-20');\n        -> 7\nmysql> SELECT WEEK('1998-02-20',0);\n        -> 7\nmysql> SELECT WEEK('1998-02-20',1);\n        -> 8\nmysql> SELECT WEEK('1998-12-31',1);\n        -> 53"),(22,10,"LOCK","LOCK TABLES locks tables for the current thread.  UNLOCK\nTABLES releases any locks held by the current thread.  All tables that\nare locked by the current thread are implicitly unlocked when the\nthread issues another LOCK TABLES, or when the connection to the\nserver is closed.\n","LOCK TABLES tbl_name [AS alias] {READ [LOCAL] | [LOW_PRIORITY] WRITE}\n            [, tbl_name [AS alias] {READ [LOCAL] | [LOW_PRIORITY] WRITE} ...]\n...\nUNLOCK TABLES"),(23,27,"CHECK","CHECK TABLE works only on MyISAM and InnoDB tables. On\nMyISAM tables, it's the same thing as running myisamchk\n--medium-check table_name on the table.\n\nIf you don't specify any option, MEDIUM is used.\n","CHECK TABLE tbl_name[,tbl_name...] [option [option...]]\n\noption = QUICK | FAST | MEDIUM | EXTENDED | CHANGED"),(24,7,"RESET SLAVE","RESET SLAVE\n\nMakes the slave forget its replication position in the master's binlogs.\nThis statement is meant to be used for a clean start: it\ndeletes the *master.info and\n*relay-log.info files, all the relay logs, and starts a new relay log.\nNote: All relay logs are deleted, even if they had not been\ntotally executed by the slave SQL thread.\n(This is a condition likely to exist on a replication slave that is\nhighly loaded, or if you have issued a STOP SLAVE statement.)\nConnection information stored in the *master.info file is\nimmediately reset to the values specified in the corresponding startup\noptions, if they were specified. \nThis information includes values such as\nmaster host, master port, master user, and master password.\nIf the slave SQL thread was in the middle of replicating temporary\ntables when it was stopped, and RESET SLAVE is issued, these\nreplicated temporary tables are deleted on the slave.\n\nThis statement was named FLUSH SLAVE before MySQL 3.23.26.\n",""),(25,2,"POLYGON","   Polygon(ls1,ls2,...)\nConstructs a WKB Polygon value from a number of WKB LineString\narguments. If any argument does not represent the WKB of a LinearRing\n(that is, not a closed and simple LineString) the return value\nis NULL.\n",""),(26,14,"MINUTE","   MINUTE(time)\nReturns the minute for time, in the range 0 to 59:\n","mysql> SELECT MINUTE('98-02-03 10:05:03');\n        -> 5"),(27,14,"DAY","   DAY(date)\n\nDAY() is a synonym for DAYOFMONTH().\nIt is available as of MySQL 4.1.1.\n\n   DAYOFYEAR(date)\nReturns the day of the year for date, in the range 1 to\n366:\n",""),(28,22,"MID","   SUBSTRING(str,pos,len)\n   SUBSTRING(str FROM pos FOR len)\n   MID(str,pos,len)\nReturns a substring len characters long from string str,\nstarting at position pos.\nThe variant form that uses FROM is SQL-92 syntax:\n","mysql> SELECT SUBSTRING('Quadratically',5,6);\n        -> 'ratica'"),(29,6,"REPLACE INTO","REPLACE works exactly like INSERT, except that if an old\nrecord in the table has the same value as a new record on a UNIQUE\nindex or PRIMARY KEY, the old record is deleted before the new\nrecord is inserted.\nSee also : [INSERT, ,INSERT].\n\nIn other words, you can't access the values of the old row from a\nREPLACE statement.  In some old MySQL versions it appeared that\nyou could do this, but that was a bug that has been corrected.\n\nTo be able to use REPLACE you must have INSERT and\nDELETE privileges for the table.\n","    REPLACE [LOW_PRIORITY | DELAYED]\n        [INTO] tbl_name [(col_name,...)]\n        VALUES (expression,...),(...),...\nor  REPLACE [LOW_PRIORITY | DELAYED]\n        [INTO] tbl_name [(col_name,...)]\n        SELECT ...\nor  REPLACE [LOW_PRIORITY | DELAYED]\n        [INTO] tbl_name\n        SET col_name=expression, col_name=expression,...");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (30,2,"LINESTRING","   LineString(pt1,pt2,...)\nConstructs a WKB LineString value from a number of WKB Point\narguments.  If any argument is not a WKB Point, the return value\nis NULL.  If the number of Point arguments is less than two,\nthe return value is NULL.\n",""),(31,20,"CONNECTION_ID","   CONNECTION_ID()\nReturns the connection ID (thread ID) for the connection.\nEvery connection has its own unique ID:\n","mysql> SELECT CONNECTION_ID();\n        -> 23786"),(32,6,"DELETE","DELETE deletes rows from table_name that satisfy the condition\ngiven by where_definition, and returns the number of records deleted.\n\nIf you issue a DELETE with no WHERE clause, all rows are\ndeleted.  If you do this in AUTOCOMMIT mode, this works as\nTRUNCATE. See also : [TRUNCATE, , TRUNCATE].  In MySQL 3.23,\nDELETE without a WHERE clause will return zero as the number\nof affected records.\n","DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM table_name\n       [WHERE where_definition]\n       [ORDER BY ...]\n       [LIMIT row_count]\n\nor\n\nDELETE [LOW_PRIORITY] [QUICK] [IGNORE] table_name[.*] [, table_name[.*] ...]\n       FROM table-references\n       [WHERE where_definition]\n\nor\n\nDELETE [LOW_PRIORITY] [QUICK] [IGNORE]\n       FROM table_name[.*] [, table_name[.*] ...]\n       USING table-references\n       [WHERE where_definition]"),(33,4,"ROUND","   ROUND(X)\n   ROUND(X,D)\nReturns the argument X, rounded to the nearest integer.\nWith two arguments rounded to a number to D decimals.\n","mysql> SELECT ROUND(-1.23);\n        -> -1\nmysql> SELECT ROUND(-1.58);\n        -> -2\nmysql> SELECT ROUND(1.58);\n        -> 2\nmysql> SELECT ROUND(1.298, 1);\n        -> 1.3\nmysql> SELECT ROUND(1.298, 0);\n        -> 1\nmysql> SELECT ROUND(23.298, -1);\n        -> 20"),(34,9,"NULLIF","   NULLIF(expr1,expr2)\nIf expr1 = expr2 is true, return NULL else return expr1.\nThis is the same as CASE WHEN x = y THEN NULL ELSE x END:\n","mysql> SELECT NULLIF(1,1);\n        -> NULL\nmysql> SELECT NULLIF(1,2);\n        -> 1"),(35,7,"STOP SLAVE","STOP SLAVE [thread_name [, thread_name] ... ]\n\nthread_name = IO_THREAD | SQL_THREAD\n\nStops the slave threads.\nLike START SLAVE, this statement\nmay be used with the IO_THREAD and SQL_THREAD options to name\nthe thread or threads to stop.\n\nThis command is called SLAVE STOP before MySQL 4.0.5.\nFor the moment, SLAVE STOP is still accepted for backward\ncompatibility, but is deprecated.\n",""),(36,3,"LINEFROMTEXT","   LineFromText(wkt[,srid])\n   LineStringFromText(wkt[,srid])\nConstructs a LINESTRING value using its WKT representation and SRID.\n",""),(37,7,"SHOW MASTER STATUS","SHOW MASTER STATUS\n\nProvides status information on the binlog of the master.\n",""),(38,23,"SPATIAL","MySQL can create spatial indexes using syntax similar to that for creating\nregular indexes, but extended with the SPATIAL keyword.\nSpatial columns that are indexed currently must be declared NOT NULL.\nThe following examples demonstrate how to create spatial indexes.\n\n\n   With CREATE TABLE:\n\nmysql> CREATE TABLE geom (g GEOMETRY NOT NULL, SPATIAL INDEX(g));\n\n   With ALTER TABLE:\n\nmysql> ALTER TABLE geom ADD SPATIAL INDEX(g);\n\n   With CREATE INDEX:\n\nmysql> CREATE SPATIAL INDEX sp_index ON geom (g);\n\n\nTo drop spatial indexes, use ALTER TABLE or DROP INDEX:\n\n\n   With ALTER TABLE:\n\nmysql> ALTER TABLE geom DROP INDEX g;\n\n   With DROP INDEX:\n\nmysql> DROP INDEX sp_index ON geom;\n\n\nExample: Suppose that a table geom contains more than 32000 geometries,\nwhich are stored in the column g of type GEOMETRY.\nThe table also has an AUTO_INCREMENT column fid for storing\nobject ID values.\n",""),(39,22,"UPPER","   UCASE(str)\n   UPPER(str)\nReturns the string str with all characters changed to uppercase\naccording to the current character set mapping (the default is ISO-8859-1\nLatin1):\n","mysql> SELECT UCASE('Hej');\n        -> 'HEJ'"),(40,14,"FROM_UNIXTIME","   FROM_UNIXTIME(unix_timestamp)\n   FROM_UNIXTIME(unix_timestamp,format)\nReturns a representation of the unix_timestamp argument as a value in\n'YYYY-MM-DD HH:MM:SS' or YYYYMMDDHHMMSS format, depending on\nwhether the function is used in a string or numeric context:\n\nmysql> SELECT FROM_UNIXTIME(875996580);\n        -> '1997-10-04 22:23:00'\nmysql> SELECT FROM_UNIXTIME(875996580) + 0;\n        -> 19971004222300\n\nIf format is given, the result is formatted according to the\nformat string. format may contain the same specifiers as\nthose listed in the entry for the DATE_FORMAT() function:\n","mysql> SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(),\n    ->                      '%Y %D %M %h:%i:%s %x');\n        -> '2003 6th August 06:22:58 2003'"),(41,1,"MEDIUMBLOB","   MEDIUMBLOB\n   MEDIUMTEXT\n\nA BLOB or TEXT column with a maximum length of 16777215\n(2^24 - 1) characters. See also : [Silent column changes]. See also : [BLOB].\n",""),(42,9,"IFNULL","   IFNULL(expr1,expr2)\nIf expr1 is not NULL, IFNULL() returns expr1,\nelse it returns expr2.  IFNULL() returns a numeric or string\nvalue, depending on the context in which it is used:\n","mysql> SELECT IFNULL(1,0);\n        -> 1\nmysql> SELECT IFNULL(NULL,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,10);\n        -> 10\nmysql> SELECT IFNULL(1/0,'yes');\n        -> 'yes'"),(43,4,"LEAST","   LEAST(X,Y,...)\nWith two or more arguments, returns the smallest (minimum-valued) argument.\nThe arguments are compared using the following rules:\n\n --- If the return value is used in an INTEGER context, or all arguments\nare integer-valued, they are compared as integers.\n\n --- If the return value is used in a REAL context, or all arguments are\nreal-valued, they are compared as reals.\n\n --- If any argument is a case-sensitive string, the arguments are compared\nas case-sensitive strings.\n\n --- In other cases, the arguments are compared as case-insensitive strings:\n","mysql> SELECT LEAST(2,0);\n        -> 0\nmysql> SELECT LEAST(34.0,3.0,5.0,767.0);\n        -> 3.0\nmysql> SELECT LEAST(\"B\",\"A\",\"C\");\n        -> \"A\""),(44,24,"=","   =\nEqual:\n","mysql> SELECT 1 = 0;\n        -> 0\nmysql> SELECT '0' = 0;\n        -> 1\nmysql> SELECT '0.0' = 0;\n        -> 1\nmysql> SELECT '0.01' = 0;\n        -> 0\nmysql> SELECT '.01' = 0.01;\n        -> 1");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (45,22,"REVERSE","   REVERSE(str)\nReturns the string str with the order of the characters reversed:\n","mysql> SELECT REVERSE('abc');\n        -> 'cba'"),(46,24,"ISNULL","   ISNULL(expr)\nIf expr is NULL, ISNULL() returns 1, otherwise\nit returns 0:\n","mysql> SELECT ISNULL(1+1);\n        -> 0\nmysql> SELECT ISNULL(1/0);\n        -> 1"),(47,22,"BINARY","   BINARY\nThe BINARY operator casts the string following it to a binary string.\nThis is an easy way to force a column comparison to be case-sensitive even\nif the column isn't defined as BINARY or BLOB:\n","mysql> SELECT \"a\" = \"A\";\n        -> 1\nmysql> SELECT BINARY \"a\" = \"A\";\n        -> 0"),(48,18,"BOUNDARY","   Boundary(g)\nReturns a geometry that is the closure of the combinatorial boundary of the\ngeometry value g.\n",""),(49,2,"POINT","   Point(x,y)\nConstructs a WKB Point using its coordinates.\n",""),(50,20,"CURRENT_USER","   CURRENT_USER()\nReturns the username and hostname that the current session was authenticated\nas. This value corresponds to the account that is used for assessing your\naccess privileges. It may be different than the value of USER().\n","mysql> SELECT USER();\n        -> 'davida@localhost'\nmysql> SELECT * FROM mysql.user;\n        -> ERROR 1044: Access denied for user: '@localhost' to database 'mysql'\nmysql> SELECT CURRENT_USER();\n        -> '@localhost'"),(51,24,"<=","   <=\nLess than or equal:\n","mysql> SELECT 0.1 <= 2;\n        -> 1"),(52,6,"UPDATE","UPDATE updates columns in existing table rows with new values.\nThe SET clause indicates which columns to modify and the values\nthey should be given.  The WHERE clause, if given, specifies\nwhich rows should be updated.  Otherwise, all rows are updated. If the\nORDER BY clause is specified, the rows will be updated in the\norder that is specified.\n\nIf you specify the keyword LOW_PRIORITY, execution of the\nUPDATE is delayed until no other clients are reading from the table.\n\nIf you specify the keyword IGNORE, the update statement will not\nabort even if we get duplicate key errors during the update.  Rows that\nwould cause conflicts will not be updated.\n","UPDATE [LOW_PRIORITY] [IGNORE] tbl_name\n    SET col_name1=expr1 [, col_name2=expr2 ...]\n    [WHERE where_definition]\n    [ORDER BY ...]\n    [LIMIT row_count]\n\nor\n\nUPDATE [LOW_PRIORITY] [IGNORE] tbl_name [, tbl_name ...]\n    SET col_name1=expr1 [, col_name2=expr2 ...]\n    [WHERE where_definition]"),(53,26,"DROP INDEX","DROP INDEX drops the index named index_name from the table\ntbl_name.  DROP INDEX doesn't do anything in MySQL\nprior to Version 3.22.  In Version 3.22 or later, DROP INDEX is mapped to an\nALTER TABLE statement to drop the index.\nSee also : [ALTER TABLE, , ALTER TABLE].\n","DROP INDEX index_name ON tbl_name"),(54,22,"MATCH AGAINST","   MATCH (col1,col2,...) AGAINST (expr)\n   MATCH (col1,col2,...) AGAINST (expr IN BOOLEAN MODE)\nMATCH ... AGAINST() is used for full-text search and returns\nrelevance - similarity measure between the text in columns\n(col1,col2,...) and the query expr. Relevance is a\npositive floating-point number. Zero relevance means no similarity.\nMATCH ... AGAINST() is available in MySQL version\n3.23.23 or later. IN BOOLEAN MODE extension was added in version\n4.0.1. For details and usage examples, see [Fulltext Search].\n  \n","mysql> SELECT id, body, MATCH (title,body) AGAINST\n    -> ('Security implications of running MySQL as root') AS score\n    -> FROM articles WHERE MATCH (title,body) AGAINST\n    -> ('Security implications of running MySQL as root');\n+----+-------------------------------------+-----------------+\n| id | body                                | score           |\n+----+-------------------------------------+-----------------+\n|  4 | 1. Never run mysqld as root. 2. ... | 1.5055546709332 |\n|  6 | When configured properly, MySQL ... |   1.31140957288 |\n+----+-------------------------------------+-----------------+\n2 rows in set (0.00 sec)"),(55,4,"ABS","   ABS(X)\nReturns the absolute value of X:\n","mysql> SELECT ABS(2);\n        -> 2\nmysql> SELECT ABS(-32);\n        -> 32"),(56,13,"POLYFROMWKB","   PolyFromWKB(wkb[,srid])\n   PolygonFromWKB(wkb[,srid])\nConstructs a POLYGON value using its WKB representation and SRID.\n",""),(57,22,"NOT LIKE","   expr NOT LIKE pat [ESCAPE 'escape-char']\nSame as NOT (expr LIKE pat [ESCAPE 'escape-char']).\n",""),(58,22,"SPACE","   SPACE(N)\nReturns a string consisting of N space characters:\n","mysql> SELECT SPACE(6);\n        -> '      '"),(59,8,"MBR DEFINITION","All geometries occupy some position in space. The exterior of\na geometry is all space not occupied by the geometry. The interior\nis the space occupied by the geometry. The boundary is the\ninterface between geometry's interior and exterior.\n\n --- Its MBR (Minimum Bounding Rectangle), or Envelope.\nThis is the bounding geometry, formed by the minimum and maximum (X,Y)\ncoordinates:\n","((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (60,2,"GEOMETRYCOLLECTION","   GeometryCollection(g1,g2,...)\nConstucts a WKB GeometryCollection. If any argument is not a\nwell-formed WKB representation of a geometry, the return value is\nNULL.\n",""),(61,4,"*","   *\nMultiplication:\n","mysql> SELECT 3*5;\n        -> 15\nmysql> SELECT 18014398509481984*18014398509481984.0;\n        -> 324518553658426726783156020576256.0\nmysql> SELECT 18014398509481984*18014398509481984;\n        -> 0"),(62,1,"TIMESTAMP","   TIMESTAMP[(M)]\n\nA timestamp.  The range is '1970-01-01 00:00:00' to sometime in the\nyear 2037.\n\nIn MySQL 4.0 and earlier, TIMESTAMP values are displayed in\nYYYYMMDDHHMMSS, YYMMDDHHMMSS, YYYYMMDD, or YYMMDD\nformat, depending on whether M is 14 (or missing), 12,\n8, or 6, but allows you to assign values to TIMESTAMP\ncolumns using either strings or numbers.\n\nFrom MySQL 4.1, TIMESTAMP is returned as a string with the format\n'YYYY-MM-DD HH:MM:SS'. If you want to have this as a number you\nshould add +0 to the timestamp column. Different timestamp lengths are\nnot supported. From version 4.0.12, the --new option can be used\nto make the server behave as in version 4.1.\n\nA TIMESTAMP column is useful\nfor recording the date and time of an INSERT or UPDATE\noperation because it is automatically set to the date and time of the most\nrecent operation if you don't give it a value yourself.  You can also set it\nto the current date and time by assigning it a NULL value.\nSee also : [Date and time types].\n\nThe M argument affects only how a TIMESTAMP column is displayed;\nits values always are stored using 4 bytes each.\n\nNote that TIMESTAMP(M) columns where M is 8 or 14 are reported to\nbe numbers while other TIMESTAMP(M) columns are reported to be\nstrings.  This is just to ensure that one can reliably dump and restore\nthe table with these types!\nSee also : [DATETIME, , DATETIME].\n",""),(63,20,"DES_DECRYPT","   DES_DECRYPT(string_to_decrypt [, key_string])\n\nDecrypts a string encrypted with DES_ENCRYPT().\n\nNote that this function only works if MySQL has been configured with\nSSL support. See also : [Secure connections].\n\nIf no key_string argument is given, DES_DECRYPT() examines\nthe first byte of the encrypted string to determine the DES key number\nthat was used to encrypt the original string, then reads the key\nfrom the des-key-file to decrypt the message.  For this to work\nthe user must have the SUPER privilege.\n\nIf you pass this function a key_string argument, that string\nis used as the key for decrypting the message.\n\nIf the string_to_decrypt doesn't look like an encrypted string, MySQL\nwill return the given string_to_decrypt.\n\nOn error, this function returns NULL.\n",""),(64,7,"CHECKSUM","\nReports a table checksum. If QUICK is specified, live table\nchecksum is reported, or NULL if the table does not support live\nchecksum. This is very fast.  In EXTENDED\nmode the whole table is read row by row and the checksum is\ncalculated. This can be very slow for large tables. By default - with\nneither QUICK nor EXTENDED - MySQL returns live checksum\nif the table support it and scans the table otherwise.\n\nThis command is implemented in MySQL 4.1.1.\n\n  @subsection FLUSH Syntax\n\n\n\nFLUSH [LOCAL | NO_WRITE_TO_BINLOG] flush_option [,flush_option] ...\n\nYou should use the FLUSH command if you want to clear some of the\ninternal caches MySQL uses.  To execute FLUSH, you must have\nthe RELOAD privilege.\n","CHECKSUM TABLE tbl_name[,tbl_name ...] [ QUICK | EXTENDED ]"),(65,17,"ENDPOINT","   EndPoint(ls)\nReturns the Point that is the end point of the LineString value\nls.\n","mysql> SELECT AsText(EndPoint(GeomFromText('LineString(1 1,2 2,3 3)')));\n+------------------------------------------------------------+\n| AsText(EndPoint(GeomFromText('LineString(1 1,2 2,3 3)')))  |\n+------------------------------------------------------------+\n| POINT(3 3)                                                 |\n+------------------------------------------------------------+"),(66,20,"COMPRESS","   COMPRESS(string_to_compress)\nCompresses a string.\n","mysql> SELECT LENGTH(COMPRESS(REPEAT(\"a\",1000)));\n        -> 21\nmysql> SELECT LENGTH(COMPRESS(\"\"));\n        -> 0\nmysql> SELECT LENGTH(COMPRESS(\"a\"));\n        -> 13\nmysql> SELECT LENGTH(COMPRESS(REPEAT(\"a\",16)));\n        -> 15"),(67,12,"COUNT","   COUNT(expr)\nReturns a count of the number of non-NULL values in the rows\nretrieved by a SELECT statement:\n","mysql> SELECT student.student_name,COUNT(*)\n    ->        FROM student,course\n    ->        WHERE student.student_id=course.student_id\n    ->        GROUP BY student_name;"),(68,22,"INSERT","   INSERT(str,pos,len,newstr)\nReturns the string str, with the substring beginning at position\npos and len characters long replaced by the string\nnewstr:\n","mysql> SELECT INSERT('Quadratic', 3, 4, 'What');\n        -> 'QuWhattic'"),(69,6,"HANDLER","The HANDLER statement provides direct access to the MyISAM table\nstorage engine interface.\n","HANDLER tbl_name OPEN [ AS alias ]\nHANDLER tbl_name READ index_name { = | >= | <= | < } (value1,value2,...)\n    [ WHERE ... ] [LIMIT ... ]\nHANDLER tbl_name READ index_name { FIRST | NEXT | PREV | LAST }\n    [ WHERE ... ] [LIMIT ... ]\nHANDLER tbl_name READ { FIRST | NEXT }\n    [ WHERE ... ] [LIMIT ... ]\nHANDLER tbl_name CLOSE"),(70,3,"MLINEFROMTEXT","   MLineFromText(wkt[,srid])\n   MultiLineStringFromText(wkt[,srid])\nConstructs a MULTILINESTRING value using its WKT representation and SRID.\n",""),(71,13,"GEOMCOLLFROMWKB","   GeomCollFromWKB(wkb[,srid])\n   GeometryCollectionFromWKB(wkt[,srid])\nConstructs a GEOMETRYCOLLECTION value using its WKB representation and SRID.\n",""),(72,26,"RENAME TABLE","RENAME TABLE tbl_name TO new_tbl_name[, tbl_name2 TO new_tbl_name2,...]\n\nThe rename is done atomically, which means that no other thread can\naccess any of the tables while the rename is running. This makes it\npossible to replace a table with an empty one\n","CREATE TABLE new_table (...);\nRENAME TABLE old_table TO backup_table, new_table TO old_table;"),(73,20,"DECODE","   DECODE(crypt_str,pass_str)\nDescrypts the encrypted string crypt_str using pass_str as the\npassword.  crypt_str should be a string returned from\nENCODE().\n",""),(74,7,"OPTIMIZE","OPTIMIZE TABLE should be used if you have deleted a large part of a\ntable or if you have made many changes to a table with variable-length rows\n(tables that have VARCHAR, BLOB, or TEXT columns).\nDeleted records are maintained in a linked list and subsequent INSERT\noperations reuse old record positions. You can use OPTIMIZE TABLE to\nreclaim the unused space and to defragment the datafile.\n","OPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name[,tbl_name]...");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (75,24,"<=>","   <=>\nNULL-safe equal:\n","mysql> SELECT 1 <=> 1, NULL <=> NULL, 1 <=> NULL;\n        -> 1 1 0"),(76,20,"GET_LOCK","   GET_LOCK(str,timeout)\nTries to obtain a lock with a name given by the string str, with a\ntimeout of timeout seconds.  Returns 1 if the lock was obtained\nsuccessfully, 0 if the attempt timed out (for example, because another\nclient has already locked the name), or NULL if an error\noccurred (such as running out of memory or the thread was killed with\nmysqladmin kill).  A lock is released when you execute\nRELEASE_LOCK(), execute a new GET_LOCK(), or the thread\nterminates (either normally or abnormally).\n\nThis function can be used to implement application locks or to\nsimulate record locks.  Names are locked on a server-wide basis.\nIf a name has been locked by one client, GET_LOCK() blocks\nany request by another client for a lock with the same name. This\nallows clients that agree on a given lock name to use the name to\nperform cooperative advisory locking:\n","mysql> SELECT GET_LOCK(\"lock1\",10);\n        -> 1\nmysql> SELECT IS_FREE_LOCK(\"lock2\");\n        -> 1\nmysql> SELECT GET_LOCK(\"lock2\",10);\n        -> 1\nmysql> SELECT RELEASE_LOCK(\"lock2\");\n        -> 1\nmysql> SELECT RELEASE_LOCK(\"lock1\");\n        -> NULL"),(77,7,"LOAD DATA FROM MASTER","LOAD DATA FROM MASTER\n\nTakes a snapshot of the master and copies it to the slave.\nUpdates the values of MASTER_LOG_FILE and\nMASTER_LOG_POS so that the slave will start replicating from the\ncorrect position. Will honor table and database exclusion rules\nspecified with replicate-* options.\n\nUse of this statement is subject to the following conditions:\n\n\n --- It works only with MyISAM tables.\n\n --- It acquires a global read lock on the master while taking the snapshot,\nwhich prevents updates on the master during the load operation.\n\n\nIn the future, it is planned to make this statement work with\nInnoDB tables and to remove the need for global read lock by using\nthe non-blocking online backup feature.\n\nIf you are loading big tables, you may have to increase the values\nof net_read_timeout and net_write_timeout\non both your master and slave.\nSee [SHOW VARIABLES, , SHOW VARIABLES].\n\nNote that LOAD DATA FROM MASTER does NOT copy any\ntables from the mysql database.  This is to make it easy to have\ndifferent users and privileges on the master and the slave.\n\nThis statement\nrequires that the replication account that is used to connect to the master\nhave RELOAD and SUPER privileges on the master,\nSELECT privileges on all master's tables you want to load. All\nmaster's tables on which the user has no SELECT privilege will\nbe ignored by LOAD DATA FROM MASTER; this is because the\nmaster will hide them to the user: LOAD DATA FROM MASTER calls\nSHOW DATABASES to know the master databases to load, but\nSHOW DATABASES returns only databases on which the user has\nsome privilege.\nSee [Show database info].\nOn the slave's side, the user which issues LOAD DATA FROM MASTER should\nhave grants to drop and create the involved databases and tables.\n",""),(78,13,"MPOLYFROMWKB","   MPolyFromWKB(wkb[,srid])\n   MultiPolygonFromWKB(wkb[,srid])\nConstructs a MULTIPOLYGON value using its WKB representation and SRID.\n",""),(79,6,"DO","Execute the expression but don't return any results.  This is a\nshorthand of SELECT expression, expression, but has the advantage\nthat it's slightly faster when you don't care about the result.\n\nThis is mainly useful with functions that has side effects, like\nRELEASE_LOCK.\n","DO expression, [expression, ...]"),(80,1,"BIGINT","   BIGINT[(M)] [UNSIGNED] [ZEROFILL]\nA large integer. The signed range is -9223372036854775808 to\n9223372036854775807. The unsigned range is 0 to\n18446744073709551615.\n",""),(81,6,"SET","SET sets various options that affect the operation of the\nserver or your client.\n\nThe following examples shows the different syntaxes one can use to set\nvariables:\n\nIn old MySQL versions we allowed the use of the SET OPTION syntax,\nbut this syntax is now deprecated.\n\nIn MySQL 4.0.3 we added the GLOBAL and SESSION options\nand access to most important startup variables.\n\nLOCAL can be used as a synonym for SESSION.\n\nIf you set several variables on the same command line, the last used\nGLOBAL | SESSION mode is used.\n","SET [GLOBAL | SESSION] sql_variable=expression,\n    [[GLOBAL | SESSION] sql_variable=expression] ..."),(82,1,"DATE","A date.  The supported range is '1000-01-01' to '9999-12-31'.\nMySQL displays DATE values in 'YYYY-MM-DD' format, but\nallows you to assign values to DATE columns using either strings or\nnumbers. See also : [DATETIME].\n",""),(83,22,"CONV","   CONV(N,from_base,to_base)\nConverts numbers between different number bases.  Returns a string\nrepresentation of the number N, converted from base from_base\nto base to_base.  Returns NULL if any argument is NULL.\nThe argument N is interpreted as an integer, but may be specified as\nan integer or a string.  The minimum base is 2 and the maximum base is\n36.  If to_base is a negative number, N is regarded as a\nsigned number.  Otherwise, N is treated as unsigned.  CONV works\nwith 64-bit precision:\n","mysql> SELECT CONV(\"a\",16,2);\n        -> '1010'\nmysql> SELECT CONV(\"6E\",18,8);\n        -> '172'\nmysql> SELECT CONV(-17,10,-18);\n        -> '-H'\nmysql> SELECT CONV(10+\"10\"+'10'+0xa,10,10);\n        -> '40'"),(84,14,"EXTRACT","   EXTRACT(type FROM date)\n\nThe EXTRACT() function uses the same kinds of interval type\nspecifiers as DATE_ADD() or DATE_SUB(), but extracts parts\nfrom the date rather than performing date arithmetic.\n","mysql> SELECT EXTRACT(YEAR FROM \"1999-07-02\");\n       -> 1999\nmysql> SELECT EXTRACT(YEAR_MONTH FROM \"1999-07-02 01:02:03\");\n       -> 199907\nmysql> SELECT EXTRACT(DAY_MINUTE FROM \"1999-07-02 01:02:03\");\n       -> 20102\nmysql> SELECT EXTRACT(MICROSECOND FROM \"2003-01-02 10:30:00.00123\");\n        -> 123"),(85,20,"ENCRYPT","   ENCRYPT(str[,salt])\nEncrypt str using the Unix crypt() system call. The\nsalt argument should be a string with two characters.\n(As of MySQL Version 3.22.16, salt may be longer than two characters.)\n","mysql> SELECT ENCRYPT(\"hello\");\n        -> 'VxuFAJXVARROc'"),(86,20,"OLD_PASSWORD","   PASSWORD(str)\n   OLD_PASSWORD(str)\nCalculates a password string from the plaintext password str. This is\nthe function that is used for encrypting MySQL passwords for storage\nin the Password column of the user grant table:\n","mysql> SELECT PASSWORD('badpwd');\n        -> '7f84554057dd964b'"),(87,20,"FORMAT","   FORMAT(X,D)\nFormats the number X to a format like '#,###,###.##', rounded\nto D decimals, and returns the result as a string.\nIf D is 0, the result will have no\ndecimal point or fractional part:\n","mysql> SELECT FORMAT(12332.123456, 4);\n        -> '12,332.1235'\nmysql> SELECT FORMAT(12332.1,4);\n        -> '12,332.1000'\nmysql> SELECT FORMAT(12332.2,0);\n        -> '12,332'"),(88,19,"||","   OR\n   ||\nLogical OR.\nEvaluates to 1 if any operand is non-zero,\nto NULL if any operand is NULL,\notherwise 0 is returned.\n","mysql> SELECT 1 || 1;\n        -> 1\nmysql> SELECT 1 || 0;\n        -> 1\nmysql> SELECT 0 || 0;\n        -> 0\nmysql> SELECT 0 || NULL;\n        -> NULL\nmysql> SELECT 1 || NULL;\n        -> 1"),(89,9,"CASE","   CASE value WHEN [compare-value] THEN result [WHEN [compare-value] THEN result ...] [ELSE result] END\n   CASE WHEN [condition] THEN result [WHEN [condition] THEN result ...] [ELSE result] END\n\nThe first version returns the result where\nvalue=compare-value. The second version returns the result for\nthe first condition, which is true. If there was no matching result\nvalue, then the result after ELSE is returned. If there is no\nELSE part then NULL is returned:\n","mysql> SELECT CASE 1 WHEN 1 THEN \"one\"\n           WHEN 2 THEN \"two\" ELSE \"more\" END;\n       -> \"one\"\nmysql> SELECT CASE WHEN 1>0 THEN \"true\" ELSE \"false\" END;\n       -> \"true\"\nmysql> SELECT CASE BINARY \"B\" WHEN \"a\" THEN 1 WHEN \"b\" THEN 2 END;\n       -> NULL");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (90,22,"BIT_LENGTH","   BIT_LENGTH(str)\nReturns the length of the string str in bits:\n","mysql> SELECT BIT_LENGTH('text');\n        -> 32"),(91,0,"EXTERIORRING","   ExteriorRing(poly)\nReturns the exterior ring of the Polygon value poly\nas a LineString.\n","mysql> SELECT AsText(ExteriorRing(GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))')));\n+--------------------------------------------------------------------------------------------+\n| AsText(ExteriorRing(GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))'))) |\n+--------------------------------------------------------------------------------------------+\n| LINESTRING(0 0,0 3,3 3,3 0,0 0)                                                            |\n+--------------------------------------------------------------------------------------------+"),(92,13,"GEOMFROMWKB","   GeomFromWKB(wkb[,srid])\n   GeometryFromWKB(wkt[,srid])\nConstructs a geometry value of any type using its WKB representation and SRID.\n",""),(93,10,"START TRANSACTION","By default, MySQL runs in autocommit mode. This means that\nas soon as you execute a statement that updates (modifies) a table,\nMySQL will store the update on disk.\n\nIf you are using transaction-safe tables (like InnoDB or BDB),\nyou can put MySQL into non-autocommit mode with the following command:\n\nSET AUTOCOMMIT=0\n\nAfter disabling autocommit mode by setting the AUTOCOMMIT variable to\nzero, you must use COMMIT to store your changes to disk or\nROLLBACK if you want to ignore the changes you have made since\nthe beginning of your transaction.\n\nIf you want to disable autocommit mode for a single series of\nstatements, you can use the START TRANSACTION statement:\n","START TRANSACTION;\nSELECT @A:=SUM(salary) FROM table1 WHERE type=1;\nUPDATE table2 SET summmary=@A WHERE type=1;\nCOMMIT;"),(94,7,"SHOW SLAVE HOSTS","SHOW SLAVE HOSTS\n\nDisplays a list of slaves currently registered with the master. \nNote that slaves not started with the --report-host=slave_name \noption will not be visible in that list.\n",""),(95,24,"BETWEEN AND","   expr BETWEEN min AND max\nIf expr is greater than or equal to min and expr is\nless than or equal to max, BETWEEN returns 1,\notherwise it returns 0.  This is equivalent to the expression\n(min <= expr AND expr <= max) if all the arguments are of the\nsame type. Otherwise type conversion takes place, according to the rules\nabove, but applied to all the three arguments. Note that before\n4.0.5 arguments were converted to the type of expr instead.\n","mysql> SELECT 1 BETWEEN 2 AND 3;\n        -> 0\nmysql> SELECT 'b' BETWEEN 'a' AND 'c';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND '3';\n        -> 1\nmysql> SELECT 2 BETWEEN 2 AND 'x-3';\n        -> 0"),(96,2,"MULTIPOLYGON","   MultiPolygon(poly1,poly2,...)\nConstructs a WKB MultiPolygon value from a set of WKB Polygon\narguments.\nIf any argument is not a WKB Polygon, the rerurn value is NULL.\n",""),(97,14,"TIME_FORMAT","   TIME_FORMAT(time,format)\nThis is used like the DATE_FORMAT() function above, but the\nformat string may contain only those format specifiers that handle\nhours, minutes, and seconds.  Other specifiers produce a NULL value or\n0.\n\nIf the time value contains an hour part that is greater than\n23, the %H and %k hour format specifiers produce a\nvalue larger than the usual range of 0..23. The other hour format\nspecifiers produce the hour value modulo 12:\n\nmysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n        -> '100 100 04 04 4'\n",""),(98,22,"LEFT","   LEFT(str,len)\nReturns the leftmost len characters from the string str:\n","mysql> SELECT LEFT('foobarbar', 5);\n        -> 'fooba'"),(99,7,"FLUSH QUERY CACHE","With the FLUSH QUERY CACHE command you can defragment the query\ncache to better utilise its memory. This command will not remove any\nqueries from the cache.\nFLUSH TABLES also flushes the query cache.\n\nThe RESET QUERY CACHE command removes all query results from the\nquery cache.\n",""),(100,4,"RAND","   RAND()\n   RAND(N)\nReturns a random floating-point value in the range 0 to 1.0.\nIf an integer argument N is specified, it is used as the seed value\n(producing a repeatable sequence):\n","mysql> SELECT RAND();\n        -> 0.9233482386203\nmysql> SELECT RAND(20);\n        -> 0.15888261251047\nmysql> SELECT RAND(20);\n        -> 0.15888261251047\nmysql> SELECT RAND();\n        -> 0.63553050033332\nmysql> SELECT RAND();\n        -> 0.70100469486881"),(101,22,"RPAD","   RPAD(str,len,padstr)\nReturns the string str, right-padded with the string padstr\nto a length of len characters. If str is longer\nthan len, the return value is shortened to len characters.\n","mysql> SELECT RPAD('hi',5,'?');\n        -> 'hi???'"),(102,6,"INSERT INTO","INSERT inserts new rows into an existing table.  The INSERT\n...  VALUES form of the statement inserts rows based on explicitly\nspecified values.  The INSERT ... SELECT form inserts rows\nselected from another table or tables.  The INSERT ... VALUES\nform with multiple value lists is supported in MySQL Version\n3.22.5 or later.  The col_name=expression syntax is supported in\nMySQL Version 3.22.10 or later.\n","    INSERT [LOW_PRIORITY | DELAYED] [IGNORE]\n        [INTO] tbl_name [(col_name,...)]\n        VALUES ((expression | DEFAULT),...),(...),...\n        [ ON DUPLICATE KEY UPDATE col_name=expression, ... ]\nor  INSERT [LOW_PRIORITY | DELAYED] [IGNORE]\n        [INTO] tbl_name [(col_name,...)]\n        SELECT ...\nor  INSERT [LOW_PRIORITY | DELAYED] [IGNORE]\n        [INTO] tbl_name\n        SET col_name=(expression | DEFAULT), ...\n        [ ON DUPLICATE KEY UPDATE col_name=expression, ... ]"),(103,26,"CREATE DATABASE","CREATE DATABASE creates a database with the given name.  \n","CREATE DATABASE [IF NOT EXISTS] db_name"),(104,27,"RESTORE","\nRESTORE TABLE tbl_name[,tbl_name...] FROM '/path/to/backup/directory'\n\nRestores the table or tables from the backup that was made with\nBACKUP TABLE. Existing tables will not be overwritten; if you\ntry to restore over an existing table, you will get an error. Restoring\nwill take longer than backing up due to the need to rebuild the index. The\nmore keys you have, the longer it will take. Just as BACKUP TABLE,\nRESTORE TABLE currently works only for MyISAM tables.\n","");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (105,22,"ELT","   ELT(N,str1,str2,str3,...)\nReturns str1 if N = 1, str2 if N =\n2, and so on.  Returns NULL if N is less than 1\nor greater than the number of arguments.  ELT() is the complement of\nFIELD():\n","mysql> SELECT ELT(1, 'ej', 'Heja', 'hej', 'foo');\n        -> 'ej'\nmysql> SELECT ELT(4, 'ej', 'Heja', 'hej', 'foo');\n        -> 'foo'"),(106,25,"~","   ~\nInvert all bits:\n","mysql> SELECT 5 & ~1;\n        -> 4"),(107,22,"CONCAT_WS","   CONCAT_WS(separator, str1, str2,...)\n\nCONCAT_WS() stands for CONCAT With Separator and is a special form of\nCONCAT().  The first argument is the separator for the rest of the\narguments.\nThe separator is added between the strings to be concatenated:\nThe separator can be a string as can the rest of the\narguments. If the separator is NULL, the result is NULL.\nThe function skips any NULL values after the\nseparator argument.\n","mysql> SELECT CONCAT_WS(\",\",\"First name\",\"Second name\",\"Last Name\");\n       -> 'First name,Second name,Last Name'\nmysql> SELECT CONCAT_WS(\",\",\"First name\",NULL,\"Last Name\");\n       -> 'First name,Last Name'"),(108,4,"ASIN","   ASIN(X)\nReturns the arc sine of X, that is, the value whose sine is\nX. Returns NULL if X is not in the range -1 to\n1:\n","mysql> SELECT ASIN(0.2);\n        -> 0.201358\nmysql> SELECT ASIN('foo');\n        -> 0.000000"),(109,21,"FUNCTION","A user-definable function (UDF) is a way to extend MySQL with a new\nfunction that works like native (built in) MySQL function such as\nABS() and CONCAT().\n\nAGGREGATE is a new option for MySQL Version 3.23.  An\nAGGREGATE function works exactly like a native MySQL\nGROUP function like SUM or COUNT().\n\nCREATE FUNCTION saves the function's name, type, and shared library\nname in the mysql.func system table.  You must have the\nINSERT and DELETE privileges for the mysql database\nto create and drop functions.\n","CREATE [AGGREGATE] FUNCTION function_name RETURNS {STRING|REAL|INTEGER}\n       SONAME shared_library_name\n\nDROP FUNCTION function_name"),(110,4,"SIGN","   SIGN(X)\nReturns the sign of the argument as -1, 0, or 1, depending\non whether X is negative, zero, or positive:\n","mysql> SELECT SIGN(-32);\n        -> -1\nmysql> SELECT SIGN(0);\n        -> 0\nmysql> SELECT SIGN(234);\n        -> 1"),(111,14,"SEC_TO_TIME","   SEC_TO_TIME(seconds)\nReturns the seconds argument, converted to hours, minutes, and seconds,\nas a value in 'HH:MM:SS' or HHMMSS format, depending on whether\nthe function is used in a string or numeric context:\n","mysql> SELECT SEC_TO_TIME(2378);\n        -> '00:39:38'\nmysql> SELECT SEC_TO_TIME(2378) + 0;\n        -> 3938"),(112,1,"FLOAT","   FLOAT(precision) [UNSIGNED] [ZEROFILL]\n\nA floating-point number.  precision can be\n<=24 for a single-precision floating-point number and between 25\nand 53 for a double-precision floating-point number. These types are like\nthe FLOAT and DOUBLE types described immediately below.\nFLOAT(X) has the same range as the corresponding FLOAT and\nDOUBLE types, but the display size and number of decimals are undefined.\n\nIn MySQL Version 3.23, this is a true floating-point value.  In\nearlier MySQL versions, FLOAT(precision) always has 2 decimals.\n\nNote that using FLOAT may give you some unexpected problems as\nall calculations in MySQL are done with double precision.\nSee also : [No matching rows].\n\nThis syntax is provided for ODBC compatibility.\n\n   FLOAT[(M,D)] [UNSIGNED] [ZEROFILL]\n\nA small (single-precision) floating-point number.  Allowable values are\n-3.402823466E+38 to -1.175494351E-38, 0,\nand 1.175494351E-38 to 3.402823466E+38.  If\nUNSIGNED is specified, negative values are disallowed.  The M\nis the display width and D is the number of decimals.  FLOAT\nwithout arguments or FLOAT(X) where X <= 24 stands for a\nsingle-precision floating-point number.\n",""),(113,1,"YEAR TYPE","   YEAR[(2|4)]\n\nA year in 2- or 4-digit format (default is 4-digit).  The allowable values\nare 1901 to 2155, 0000 in the 4-digit year format,\nand 1970-2069 if you use the 2-digit format (70-69).  MySQL displays\nYEAR values in YYYY format, but allows you to assign values to\nYEAR columns using either strings or numbers. (The YEAR type is\nunavailable prior to MySQL Version 3.22.) See also : [YEAR, , YEAR].\n",""),(114,22,"LOCATE","   LOCATE(substr,str,pos)\nReturns the position of the first occurrence of substring substr in\nstring str, starting at position pos.\nReturns 0 if substr is not in str:\n","mysql> SELECT LOCATE('bar', 'foobarbar',5);\n        -> 7"),(115,10,"ROLLBACK TO SAVEPOINT","","ROLLBACK TO SAVEPOINT identifier"),(116,7,"PURGE MASTER LOGS BEFORE TO","PURGE {MASTER|BINARY} LOGS TO 'log_name'\nPURGE {MASTER|BINARY} LOGS BEFORE 'date'\n\nDeletes all the binary logs listed in the log\nindex that are strictly prior to the specified log or date.\nThe logs also are removed from this list recorded in the log index file,\nso that the given log now becomes the first. \n",""),(117,14,"DAYOFYEAR","","mysql> SELECT DAYOFYEAR('1998-02-03');\n        -> 34"),(118,4,"%","   MOD(N,M)\n   %\nModulo (like the % operator in C).\nReturns the remainder of N divided by M:\n","mysql> SELECT MOD(234, 10);\n        -> 4\nmysql> SELECT 253 % 7;\n        -> 1\nmysql> SELECT MOD(29,9);\n        -> 2\nmysql> SELECT 29 MOD 9;\n        -> 2"),(119,11,"DISJOINT","   Disjoint(g1,g2)\nReturns 1 or 0 to indicate whether or not g1 is spatially disjoint\nfrom (does not intersect) g2.\n","");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (120,7,"KILL","Each connection to mysqld runs in a separate thread.  You can see\nwhich threads are running with the SHOW PROCESSLIST command and kill\na thread with the KILL thread_id command.\n\nIf you have the PROCESS privilege, you can see all threads.\nIf you have the SUPER privilege, you can kill all threads.\nOtherwise, you can only see and kill your own threads.\n\nYou can also use the mysqladmin processlist and mysqladmin kill\ncommands to examine and kill threads.\n\n/Note/: You currently cannot use KILL with the Embedded MySQL\nServer library, because the embedded server merely runs inside the threads\nof the host application, it does not create connection threads of its own.\n\nWhen you do a KILL, a thread-specific kill flag is set for\nthe thread.\n","KILL thread_id"),(121,3,"ASTEXT","   AsText(g)\nConverts a value in internal geometry format to its WKT representation\nand returns the resulting string.\n","mysql> SELECT AsText(g) FROM geom;\n+-------------------------+\n| AsText(p1)              |\n+-------------------------+\n| POINT(1 1)              |\n| LINESTRING(0 0,1 1,2 2) |\n+-------------------------+"),(122,22,"LPAD","   LPAD(str,len,padstr)\nReturns the string str, left-padded with the string padstr\nto a length of len characters. If str is longer\nthan len, the return value is shortened to len characters.\n","mysql> SELECT LPAD('hi',4,'??');\n        -> '??hi'"),(123,11,"OVERLAPS","   Overlaps(g1,g2)\nReturns 1 or 0 to indicate whether or not g1 spatially overlaps\ng2.\nThe term spatially overlaps is used if two\ngeometries intersect and their intersection results in a geometry of the\nsame dimension but not equal to either of the given geometries.\n",""),(124,5,"NUMGEOMETRIES","   NumGeometries(gc)\nReturns the number of geometries in the GeometryCollection value\ngc.\n","mysql> SELECT NumGeometries(GeomFromText('GeometryCollection(Point(1 1),LineString(2 2, 3 3))'));\n+------------------------------------------------------------------------------------+\n| NumGeometries(GeomFromText('GeometryCollection(Point(1 1),LineString(2 2, 3 3))')) |\n+------------------------------------------------------------------------------------+\n|                                                                                  2 |\n+------------------------------------------------------------------------------------+"),(125,14,"MONTHNAME","   MONTHNAME(date)\nReturns the name of the month for date:\n","mysql> SELECT MONTHNAME('1998-02-05');\n        -> 'February'"),(126,7,"SET GLOBAL SQL_SLAVE_SKIP_COUNTER","SET GLOBAL SQL_SLAVE_SKIP_COUNTER = n\n\nSkip the next n events from the master. This is\nuseful for recovering from replication stops caused by a statement.\n\nThis statement is valid only when the slave thread is not running.\nOtherwise, it produces an error.\n\nBefore MySQL 4.0, omit the GLOBAL keyword from the statement.\n",""),(127,26,"DROP DATABASE","DROP DATABASE drops all tables in the database and deletes the\ndatabase.  If you do a DROP DATABASE on a symbolic linked\ndatabase, both the link and the original database is deleted. \n!!!!\nBe\nVERY careful with this command!\n!!!!\n","DROP DATABASE [IF EXISTS] db_name"),(128,14,"TIMESTAMP FUNCTION","   TIMESTAMP(expr)\n   TIMESTAMP(expr,expr2)\n\nWith one argument, returns the date or datetime expression expr\nas a datetime value.\nWith two arguments, adds the time expression expr2 to the\ndate or datetime expression expr and returns a datetime value.\n","mysql> SELECT TIMESTAMP('2003-12-31');\n        -> '2003-12-31 00:00:00'\nmysql> SELECT TIMESTAMP('2003-12-31 12:00:00','12:00:00');\n        -> '2004-01-01 00:00:00'"),(129,7,"CHANGE MASTER TO","\nCHANGE MASTER TO master_def [, master_def] ...\n\nmaster_def =\n      MASTER_HOST = 'host_name'\n    | MASTER_USER = 'user_name'\n    | MASTER_PASSWORD = 'password'\n    | MASTER_PORT = port_num\n    | MASTER_CONNECT_RETRY = count\n    | MASTER_LOG_FILE = 'master_log_name'\n    | MASTER_LOG_POS = master_log_pos\n    | RELAY_LOG_FILE = 'relay_log_name'\n    | RELAY_LOG_POS = relay_log_pos\n    | MASTER_SSL = {0|1}\n    | MASTER_SSL_CA = 'ca_file_name'\n    | MASTER_SSL_CAPATH = 'ca_directory_name'\n    | MASTER_SSL_CERT = 'cert_file_name'\n    | MASTER_SSL_KEY = 'key_file_name'\n    | MASTER_SSL_CIPHER = 'cipher_list'\n\nChanges the parameters that the slave server uses for connecting to and\ncommunicating with the master server.\nThe possible master_def values are shown above.\n\nThe relay log options\n(RELAY_LOG_FILE and RELAY_LOG_POS) are available beginning with\nMySQL 4.0.\n\nThe SSL options\n(MASTER_SSL,\nMASTER_SSL_CA,\nMASTER_SSL_CAPATH,\nMASTER_SSL_CERT,\nMASTER_SSL_KEY,\nand\nMASTER_SSL_CIPHER)\nare available beginning with MySQL 4.1.1.\nYou can change these options even on slaves that are compiled without SSL\nsupport. They will be saved to the *master.info file but ignored until\nyou use a server that has SSL support enabled.\n\nFor example:\n\nmysql> CHANGE MASTER TO\n    ->     MASTER_HOST='master2.mycompany.com',\n    ->     MASTER_USER='replication',\n    ->     MASTER_PASSWORD='bigs3cret',\n    ->     MASTER_PORT=3306,\n    ->     MASTER_LOG_FILE='master2-bin.001',\n    ->     MASTER_LOG_POS=4,\n    ->     MASTER_CONNECT_RETRY=10;\nmysql> CHANGE MASTER TO\n    ->     RELAY_LOG_FILE='slave-relay-bin.006',\n    ->     RELAY_LOG_POS=4025;\n",""),(130,4,"CRC32","   CRC32(expr)\nComputes a cyclic redundancy check value and returns a 32-bit unsigned value.\nThe result is NULL if the argument is NULL.\nThe argument is expected be a string and will be treated as one if it is not.\n","mysql> SELECT CRC32('MySQL');\n        -> 3259397556"),(131,19,"XOR","   XOR\nLogical XOR.\nReturns NULL if either operand is NULL.\nFor non-NULL operands, evaluates to 1 if an odd number\nof operands is non-zero,\notherwise 0 is returned.\n",""),(132,17,"STARTPOINT","   StartPoint(ls)\nReturns the Point that is the start point of the LineString value\nls.\n","mysql> SELECT AsText(StartPoint(GeomFromText('LineString(1 1,2 2,3 3)')));\n+-------------------------------------------------------------+\n| AsText(StartPoint(GeomFromText('LineString(1 1,2 2,3 3)'))) |\n+-------------------------------------------------------------+\n| POINT(1 1)                                                  |\n+-------------------------------------------------------------+"),(133,3,"MPOLYFROMTEXT","   MPolyFromText(wkt[,srid])\n   MultiPolygonFromText(wkt[,srid])\nConstructs a MULTIPOLYGON value using its WKT representation and SRID.\n",""),(134,7,"GRANT","The GRANT and REVOKE commands allow system administrators\nto create users and grant and revoke rights to MySQL users at\nfour privilege levels:\n\n   Global level\nGlobal privileges apply to all databases on a given server. These privileges\nare stored in the mysql.user table.\nGRANT ALL ON *.* and\nREVOKE ALL ON *.* will grant and revoke only global privileges.\n\n   Database level\nDatabase privileges apply to all tables in a given database. These privileges\nare stored in the mysql.db and mysql.host tables.\nGRANT ALL ON db.* and\nREVOKE ALL ON db.* will grant and revoke only database privileges.\n\n   Table level\nTable privileges apply to all columns in a given table. These privileges are\nstored in the mysql.tables_priv table.\nGRANT ALL ON db.table and\nREVOKE ALL ON db.table will grant and revoke only table privileges.\n\n   Column level\nColumn privileges apply to single columns in a given table. These privileges are\nstored in the mysql.columns_priv table.\nWhen using REVOKE you must specify the same columns that were granted.\n  \n","GRANT priv_type [(column_list)] [, priv_type [(column_list)] ...]\n    ON {tbl_name | * | *.* | db_name.*}\n    TO user_name [IDENTIFIED BY [PASSWORD] 'password']\n        [, user_name [IDENTIFIED BY [PASSWORD] 'password'] ...]\n    [REQUIRE\n        NONE |\n        [{SSL| X509}]\n        [CIPHER cipher [AND]]\n        [ISSUER issuer [AND]]\n        [SUBJECT subject]]\n    [WITH [GRANT OPTION | MAX_QUERIES_PER_HOUR # |\n                          MAX_UPDATES_PER_HOUR # |\n                          MAX_CONNECTIONS_PER_HOUR #]]\n\nREVOKE priv_type [(column_list)] [, priv_type [(column_list)] ...]\n    ON {tbl_name | * | *.* | db_name.*}\n    FROM user_name [, user_name ...]");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (135,8,"MBRINTERSECTS","   MBRIntersects(g1,g2)\nReturns 1 or 0 to indicate whether or not the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 intersect.\n",""),(136,12,"BIT_OR","   BIT_OR(expr)\nReturns the bitwise OR of all bits in expr. The calculation is\nperformed with 64-bit (BIGINT) precision.\n\nFunction returns 0 if there were no matching rows.\n",""),(137,14,"YEARWEEK","Returns year and week for a date.  The start argument works exactly\nlike the start argument to WEEK().  Note that the year in the\nresult may be\ndifferent from the year in the date argument for the first and the last\nweek of the year:\n","mysql> SELECT YEARWEEK('1987-01-01');\n        -> 198653"),(138,24,"NOT BETWEEN","   expr NOT BETWEEN min AND max\nSame as NOT (expr BETWEEN min AND max).\n",""),(139,4,"LOG10","   LOG10(X)\nReturns the base-10 logarithm of X:\n","mysql> SELECT LOG10(2);\n        -> 0.301030\nmysql> SELECT LOG10(100);\n        -> 2.000000\nmysql> SELECT LOG10(-100);\n        -> NULL"),(140,4,"SQRT","   SQRT(X)\nReturns the non-negative square root of X:\n","mysql> SELECT SQRT(4);\n        -> 2.000000\nmysql> SELECT SQRT(20);\n        -> 4.472136"),(141,5,"GEOMETRYN","   GeometryN(gc,n)\nReturns the n-th geometry in the GeometryCollection value\ngc.  Geometry numbers begin at 1.\n","mysql> SELECT AsText(GeometryN(GeomFromText('GeometryCollection(Point(1 1),LineString(2 2, 3 3))'),1));\n+------------------------------------------------------------------------------------------+\n| AsText(GeometryN(GeomFromText('GeometryCollection(Point(1 1),LineString(2 2, 3 3))'),1)) |\n+------------------------------------------------------------------------------------------+\n| POINT(1 1)                                                                               |\n+------------------------------------------------------------------------------------------+"),(142,26,"CREATE INDEX","The CREATE INDEX statement doesn't do anything in MySQL prior\nto Version 3.22.  In Version 3.22 or later, CREATE INDEX is mapped to an\nALTER TABLE statement to create indexes.\n","CREATE [UNIQUE|FULLTEXT] INDEX index_name\n       ON tbl_name (index_col_name,...)\n\nindex_col_name:\n        col_name [(length)] [ASC | DESC]"),(143,25,"<<","   <<\nShifts a longlong (BIGINT) number to the left:\n","mysql> SELECT 1 << 2;\n        -> 4"),(144,20,"MD5","   MD5(string)\nCalculates an MD5 128-bit checksum for the string. The value is returned\nas a 32-digit hex number that may, for example, be used as a hash key:\n","mysql> SELECT MD5(\"testing\");\n        -> 'ae2b1fca515949e5d54fb22b8ed95575'"),(145,24,"<","   <\nLess than:\n","mysql> SELECT 2 < 2;\n        -> 0"),(146,14,"UNIX_TIMESTAMP","   UNIX_TIMESTAMP()\n   UNIX_TIMESTAMP(date)\nIf called with no argument, returns a Unix timestamp (seconds since\n'1970-01-01 00:00:00' GMT) as an unsigned integer. If\nUNIX_TIMESTAMP() is called with a date argument, it\nreturns the value of the argument as seconds since '1970-01-01\n00:00:00' GMT.  date may be a DATE string, a\nDATETIME string, a TIMESTAMP, or a number in the format\nYYMMDD or YYYYMMDD in local time:\n","mysql> SELECT UNIX_TIMESTAMP();\n        -> 882226357\nmysql> SELECT UNIX_TIMESTAMP('1997-10-04 22:23:00');\n        -> 875996580"),(147,14,"DAYOFMONTH","   DAYOFMONTH(date)\nReturns the day of the month for date, in the range 1 to\n31:\n","mysql> SELECT DAYOFMONTH('1998-02-03');\n        -> 3"),(148,22,"ASCII","   ASCII(str)\nReturns the ASCII code value of the leftmost character of the string\nstr. Returns 0 if str is the empty string.  Returns\nNULL if str is NULL:\n","mysql> SELECT ASCII('2');\n        -> 50\nmysql> SELECT ASCII(2);\n        -> 50\nmysql> SELECT ASCII('dx');\n        -> 100"),(149,4,"DIV","Integer division.\nSimilar to FLOOR() but safe with BIGINT values.\n","mysql> SELECT 5 DIV 2\n        -> 2");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (150,7,"SHOW SLAVE STATUS","SHOW SLAVE STATUS\n\nProvides status information on\nessential parameters of the slave threads. If you issue this statement using\nthe\nmysql client, you can use a \\G statement terminator rather than\nsemicolon to get a more readable vertical layout:\n\nmysql> SHOW SLAVE STATUS\\G\n*************************** 1. row ***************************\n       Slave_IO_State: Waiting for master to send event\n          Master_Host: localhost\n          Master_User: root\n          Master_Port: 3306\n        Connect_Retry: 3\n      Master_Log_File: gbichot-bin.005\n  Read_Master_Log_Pos: 79\n       Relay_Log_File: gbichot-relay-bin.005\n        Relay_Log_Pos: 548\nRelay_Master_Log_File: gbichot-bin.005\n     Slave_IO_Running: Yes\n    Slave_SQL_Running: Yes\n      Replicate_Do_DB:\n  Replicate_Ignore_DB:\n           Last_Errno: 0\n           Last_Error:\n         Skip_Counter: 0\n  Exec_Master_Log_Pos: 79\n      Relay_Log_Space: 552\n      Until_Condition: None\n       Until_Log_File:\n        Until_Log_Pos: 0\n   Master_SSL_Allowed: No\n   Master_SSL_CA_File:\n   Master_SSL_CA_Path:\n      Master_SSL_Cert:\n    Master_SSL_Cipher:\n       Master_SSL_Key:\nSeconds_Behind_Master: 8\n",""),(151,23,"GEOMETRY","MySQL provides a standard way of creating spatial columns for\ngeometry types, for example, with CREATE TABLE or ALTER TABLE.\nCurrently, spatial columns are supported only for MyISAM tables.\n","mysql> CREATE TABLE geom (g GEOMETRY);\nQuery OK, 0 rows affected (0.02 sec)"),(152,17,"NUMPOINTS","   NumPoints(ls)\nReturns the number of points in the LineString value ls.\n","mysql> SELECT NumPoints(GeomFromText('LineString(1 1,2 2,3 3)'));\n+----------------------------------------------------+\n| NumPoints(GeomFromText('LineString(1 1,2 2,3 3)')) |\n+----------------------------------------------------+\n|                                                  3 |\n+----------------------------------------------------+"),(153,25,"&","   &\nBitwise AND\n","mysql> SELECT 29 & 15;\n        -> 13"),(154,1,"SMALLINT","   SMALLINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA small integer. The signed range is -32768 to 32767. The\nunsigned range is 0 to 65535.\n",""),(155,22,"ORD","   ORD(str)\nIf the leftmost character of the string str is a multi-byte character,\nreturns the code for that character, calculated from the ASCII code values\nof its constituent characters using this formula:\n((first byte ASCII code)*256+(second byte ASCII code))[*256+third byte ASCII code...].\nIf the leftmost character is not a multi-byte character, returns the same\nvalue that the ASCII() function does:\n","mysql> SELECT ORD('2');\n        -> 50"),(156,18,"ENVELOPE","   Envelope(g)\nReturns the Minimum Bounding Rectangle (MBR) for the geometry value g.\nThe result is returned as a polygon value.\n\nmysql> SELECT AsText(Envelope(GeomFromText('LineString(1 1,2 2)')));\n+-------------------------------------------------------+\n| AsText(Envelope(GeomFromText('LineString(1 1,2 2)'))) |\n+-------------------------------------------------------+\n| POLYGON((1 1,2 1,2 2,1 2,1 1))                        |\n+-------------------------------------------------------+\n\nThe polygon is defined by the corner points of the bounding box:\n\nPOLYGON((MINX MINY, MAXX MINY, MAXX MAXY, MINX MAXY, MINX MINY))\n",""),(157,20,"IS_FREE_LOCK","   IS_FREE_LOCK(str)\nChecks if the lock named str is free to use (that is, not locked).\nReturns 1 if the lock is free (no one is using the lock),\n0 if the lock is in use, and\nNULL on errors (such as incorrect arguments).\n",""),(158,14,"ADDTIME SUBTIME","   ADDTIME(expr,expr2)\n   SUBTIME(expr,expr2)\n\n\nexpr is a date or datetime expression, and expr2 is a time\nexpression.\n\nADDTIME() adds expr2 to expr and returns the result.\nSUBTIME() subtracts expr2 from expr and returns the result.\n","mysql> SELECT ADDTIME(\"1997-12-31 23:59:59.999999\", \"1 1:1:1.000002\");\n        -> '1998-01-02 01:01:01.000001'\nmysql> SELECT SUBTIME(\"1997-12-31 23:59:59.999999\", \"1 1:1:1.000002\");\n        -> '1997-12-30 22:58:58.999997'\nmysql> SELECT ADDTIME(\"01:00:00.999999\", \"02:00:00.999998\");\n        -> '03:00:01.999997'\nmysql> SELECT SUBTIME(\"01:00:00.999999\", \"02:00:00.999998\");\n        -> '-00:59:59.999999'"),(159,7,"SHOW BINLOG","SHOW BINLOG EVENTS [ IN 'log_name' ] [ FROM pos ] [ LIMIT [offset,] row_count ]\n\n\nShows the events in the binary log. \nIf you do not specify 'log_name', the first binary log will be displayed.\n",""),(160,11,"TOUCHES","   Touches(g1,g2)\nReturns 1 or 0 to indicate whether or not g1 spatially touches\ng2. Two geometries spatially touch if the interiors of\nthe geometries do not intersect, but the boundary of one of the geometries\nintersects either the boundary or the interior of the other.\n",""),(161,20,"INET_ATON","   INET_ATON(expr)\nGiven the dotted-quad representation of a network address as a string,\nreturns an integer that represents the numeric value of the address.\nAddresses may be 4 or 8 byte addresses:\n","mysql> SELECT INET_ATON(\"209.207.224.40\");\n       ->  3520061480"),(162,20,"UNCOMPRESS","   UNCOMPRESS(string_to_uncompress)\nUncompresses a string compressed by the COMPRESS() function.\n","mysql> SELECT UNCOMPRESS(COMPRESS(\"any string\"));\n        -> 'any string'"),(163,1,"AUTO_INCREMENT","The AUTO_INCREMENT attribute can be used to generate a unique\nidentity for new rows:\n","CREATE TABLE animals (\n             id MEDIUMINT NOT NULL AUTO_INCREMENT,\n             name CHAR(30) NOT NULL,\n             PRIMARY KEY (id)\n             );\nINSERT INTO animals (name) VALUES (\"dog\"),(\"cat\"),(\"penguin\"),\n                                  (\"lax\"),(\"whale\"),(\"ostrich\");\nSELECT * FROM animals;"),(164,18,"ISSIMPLE","   IsSimple(g)\n\nCurrently, this function is a placeholder and should not be used.\nWhen implemented, its behavior will be as described in the next paragraph.\n\nReturns 1 if the geometry value g has no anomalous geometric points,\nsuch as self intersection or self tangency. IsSimple() returns 0 if the\nargument is not simple, and @minus{}1 if it is NULL.\n\nThe description of each instantiable geometric class given earlier in\nthe chapter includes the specific conditions that cause an instance of\nthat class to be classified as not simple.\n","");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (165,4,"- BINARY","   -\nSubtraction:\n","mysql> SELECT 3-5;\n        -> -2"),(166,3,"GEOMCOLLFROMTEXT","   GeomCollFromText(wkt[,srid])\n   GeometryCollectionFromText(wkt[,srid])\nConstructs a GEOMETRYCOLLECTION value using its WKT representation and SRID.\n",""),(167,3,"WKT DEFINITION","The Well-Known Text (WKT) representation of Geometry is designed to\nexchange geometry data in ASCII form.\n",""),(168,14,"CURRENT_TIME","   CURTIME()\n   CURRENT_TIME\n   CURRENT_TIME()\nReturns the current time as a value in 'HH:MM:SS' or HHMMSS\nformat, depending on whether the function is used in a string or numeric\ncontext:\n","mysql> SELECT CURTIME();\n        -> '23:50:26'\nmysql> SELECT CURTIME() + 0;\n        -> 235026"),(169,20,"LAST_INSERT_ID","   LAST_INSERT_ID([expr])\nReturns the last automatically generated value that was inserted into an\nAUTO_INCREMENT column.\n","mysql> SELECT LAST_INSERT_ID();\n        -> 195"),(170,14,"LAST_DAY","   LAST_DAY(date)\n\nTakes a date or datetime value and returns the corresponding value for the\nlast day of the month.  Returns NULL if the argument is invalid.\n","mysql> SELECT LAST_DAY('2003-02-05'), LAST_DAY('2004-02-05');\n        -> '2003-02-28', '2004-02-29'\nmysql> SELECT LAST_DAY('2004-01-01 01:01:01');\n        -> '2004-01-31'\nmysql> SELECT LAST_DAY('2003-03-32');\n        -> NULL"),(171,1,"MEDIUMINT","   MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]\n\nA medium-size integer. The signed range is -8388608 to\n8388607. The unsigned range is 0 to 16777215.\n",""),(172,4,"FLOOR","   FLOOR(X)\nReturns the largest integer value not greater than X:\n","mysql> SELECT FLOOR(1.23);\n        -> 1\nmysql> SELECT FLOOR(-1.23);\n        -> -2"),(173,22,"RTRIM","   RTRIM(str)\nReturns the string str with trailing space characters removed:\n","mysql> SELECT RTRIM('barbar   ');\n        -> 'barbar'"),(174,4,"DEGREES","   DEGREES(X)\nReturns the argument X, converted from radians to degrees:\n","mysql> SELECT DEGREES(PI());\n        -> 180.000000"),(175,6,"EXPLAIN","EXPLAIN tbl_name is a synonym for DESCRIBE tbl_name or\nSHOW COLUMNS FROM tbl_name.\n\nWhen you precede a SELECT statement with the keyword EXPLAIN,\nMySQL explains how it would process the SELECT, providing\ninformation about how tables are joined and in which order.\n\nWith the help of EXPLAIN, you can see when you must add indexes\nto tables to get a faster SELECT that uses indexes to find the\nrecords.\n","    EXPLAIN tbl_name\nor  EXPLAIN SELECT select_options"),(176,1,"VARCHAR","   [NATIONAL] VARCHAR(M) [BINARY]\n\nA variable-length string.  Note: trailing spaces are removed when\nthe value is stored (this differs from the SQL-99 specification). The range\nof M is 0 to 255 characters (1 to 255 prior to MySQL Version 4.0.2).\nVARCHAR values are sorted and compared in case-insensitive fashion\nunless the BINARY keyword is given. See also : [Silent column changes].\n\nFrom version 4.1.0, if the M value specified is greater than 255,\nthe column type is converted to TEXT.\nThis is a compatibility feature.\n\nVARCHAR is a shorthand for CHARACTER VARYING.\n",""),(177,4,"- UNARY","   -\nUnary minus. Changes the sign of the argument:\n","mysql> SELECT - 2;\n        -> -2"),(178,4,"COS","   COS(X)\nReturns the cosine of X, where X is given in radians:\n","mysql> SELECT COS(PI());\n        -> -1.000000"),(179,14,"DATE FUNCTION","   DATE(expr)\n\nExtracts the date part of the date or datetime expression expr.\n","mysql> SELECT DATE('2003-12-31 01:02:03');\n        -> '2003-12-31'");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (180,4,"TAN","   TAN(X)\nReturns the tangent of X, where X is given in radians:\n","mysql> SELECT TAN(PI()+1);\n        -> 1.557408"),(181,4,"PI","   PI()\nReturns the value of PI. The default shown number of decimals is 5, but\nMySQL internally uses the full double precession for PI.\n","mysql> SELECT PI();\n        -> 3.141593\nmysql> SELECT PI()+0.000000000000000000;\n        -> 3.141592653589793116"),(182,7,"RESET MASTER","RESET MASTER\n\nDeletes all binary logs listed in the index file, resetting the binlog\nindex file to be empty.\n\nThis statement was named FLUSH MASTER before MySQL 3.23.26.\n",""),(183,14,"WEEKOFYEAR","   WEEKOFYEAR(date)\n\nReturns the calendar week of the date as a number in the\nrange from 1 to 53.\n","mysql> SELECT WEEKOFYEAR('1998-02-20');\n        -> 8"),(184,4,"/","   /\nDivision:\n","mysql> SELECT 3/5;\n        -> 0.60"),(185,8,"MBREQUALS","   MBREquals(g1,g2)\nReturns 1 or 0 to indicate whether or not the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 are the same.\n",""),(186,13,"MLINEFROMWKB","   MLineFromWKB(wkb[,srid])\n   MultiLineStringFromWKB(wkb[,srid])\nConstructs a MULTILINESTRING value using its WKB representation and SRID.\n",""),(187,4,"LOG2","   LOG2(X)\nReturns the base-2 logarithm of X:\n","mysql> SELECT LOG2(65536);\n        -> 16.000000\nmysql> SELECT LOG2(-100);\n        -> NULL"),(188,20,"UNCOMPRESSED_LENGTH","   UNCOMPRESSED_LENGTH(compressed_string)\nReturns the length of a compressed string before compressing.\n","mysql> SELECT UNCOMPRESSED_LENGTH(COMPRESS(REPEAT(\"a\",30)));\n        -> 30"),(189,26,"DROP TABLE","DROP TABLE removes one or more tables. All table data and the table\ndefinition are /removed/, so be careful with this command!\n\nIn MySQL Version 3.22 or later, you can use the keywords\nIF EXISTS to prevent an error from occurring for tables that don't\nexist.  In 4.1 one gets a NOTE for all not existing tables when using\nIF EXISTS. See also : [SHOW WARNINGS].\n\nRESTRICT and CASCADE are allowed to make porting easier.\nFor the moment they don't do anything.\n\nNote: DROP TABLE will automatically commit current\nactive transaction (except if you are using 4.1 and the TEMPORARY\nkey word.\n","DROP [TEMPORARY] TABLE [IF EXISTS] tbl_name [, tbl_name,...] [RESTRICT | CASCADE]"),(190,21,"DUAL","SELECT ... FROM DUAL is an alias for SELECT ....\n(To be compatible with some other databases).\n",""),(191,22,"INSTR","   INSTR(str,substr)\nReturns the position of the first occurrence of substring substr in\nstring str. This is the same as the two-argument form of\nLOCATE(), except that the arguments are swapped:\n","mysql> SELECT INSTR('foobarbar', 'bar');\n        -> 4\nmysql> SELECT INSTR('xbar', 'foobar');\n        -> 0"),(192,24,">=","   >=\nGreater than or equal:\n","mysql> SELECT 2 >= 2;\n        -> 1"),(193,4,"EXP","   EXP(X)\nReturns the value of e (the base of natural logarithms) raised to\nthe power of X:\n","mysql> SELECT EXP(2);\n        -> 7.389056\nmysql> SELECT EXP(-2);\n        -> 0.135335"),(194,20,"SHA","   SHA1(string)\n   SHA(string)\nCalculates an SHA1 160-bit checksum for the string, as described in\nRFC 3174 (Secure Hash Algorithm). The value is returned as a 40-digit\nhex number, or NULL in case the input argument was NULL.\nOne of the possible uses for this function is as a hash key. You can\nalso use it as cryptographically safe function for storing passwords.\n","mysql> SELECT SHA1(\"abc\");\n        -> 'a9993e364706816aba3e25717850c26c9cd0d89d'");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (195,1,"LONGBLOB","   LONGBLOB\n   LONGTEXT\n\nA BLOB or TEXT column with a maximum length of 4294967295\nor 4G (2^32 - 1) characters. See also : [Silent column changes].\nUp to MySQL version 3.23 the server/client protocol and MyISAM tables had\na limit of 16M per communication packet / table row, from version 4.x\nthe maximum allowed length of LONGTEXT or LONGBLOB columns\ndepends on the configured maximum packet size in the client/server\nprotocol and available memory. See also : [BLOB].\n",""),(196,17,"POINTN","   PointN(ls,n)\nReturns the n-th point in the Linestring value ls.\nPoint numbers begin at 1.\n","mysql> SELECT AsText(PointN(GeomFromText('LineString(1 1,2 2,3 3)'),2));\n+-----------------------------------------------------------+\n| AsText(PointN(GeomFromText('LineString(1 1,2 2,3 3)'),2)) |\n+-----------------------------------------------------------+\n| POINT(2 2)                                                |\n+-----------------------------------------------------------+"),(197,22,"OCT","   OCT(N)\nReturns a string representation of the octal value of N, where\nN is a longlong number.  This is equivalent to CONV(N,10,8).\nReturns NULL if N is NULL:\n","mysql> SELECT OCT(12);\n        -> '14'"),(198,12,"SUM","   SUM(expr)\nReturns the sum of expr.  Note that if the return set has no rows,\nit returns NULL!\n",""),(199,13,"ASBINARY","   AsBinary(g)\nConverts a value in internal geometry format to its WKB representation\nand returns the resulting binary value.\n","SELECT AsBinary(g) FROM geom;"),(200,14,"MAKEDATE","   MAKEDATE(year,dayofyear)\n\nReturns a date, given year and day-of-year values.\ndayofyear must be greater than 0 or the result will NULL.\n","mysql> SELECT MAKEDATE(2001,31), MAKEDATE(2001,32);\n        -> '2001-01-31', '2001-02-01'\nmysql> SELECT MAKEDATE(2001,365), MAKEDATE(2004,365);\n        -> '2001-12-31', '2004-12-30'\nmysql> SELECT MAKEDATE(2001,0);\n        -> NULL"),(201,8,"MBROVERLAPS","   MBROverlaps(g1,g2)\nReturns 1 or 0 to indicate whether or not the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 overlap.\n",""),(202,22,"SOUNDEX","   SOUNDEX(str)\nReturns a soundex string from str. Two strings that sound almost the\nsame should have identical soundex strings. A standard soundex string\nis 4 characters long, but the SOUNDEX() function returns an\narbitrarily long string. You can use SUBSTRING() on the result to get\na standard soundex string.  All non-alphanumeric characters are ignored\nin the given string. All international alpha characters outside the A-Z range\nare treated as vowels:\n","mysql> SELECT SOUNDEX('Hello');\n        -> 'H400'\nmysql> SELECT SOUNDEX('Quadratically');\n        -> 'Q36324'"),(203,7,"SHOW MASTER LOGS","SHOW MASTER LOGS\n\nLists the binary logs on the master. You should use this\ncommand before using PURGE MASTER LOGS to find out how far you\nshould go.\n",""),(204,8,"MBRTOUCHES","   MBRTouches(g1,g2)\nReturns 1 or 0 to indicate whether or not the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 touch.\n",""),(205,6,"INSERT SELECT","INSERT [LOW_PRIORITY] [IGNORE] [INTO] tbl_name [(column list)] SELECT ...\n\nWith INSERT ... SELECT statement you can quickly insert many rows\ninto a table from one or many tables.\n","INSERT INTO tblTemp2 (fldID) SELECT tblTemp1.fldOrder_ID FROM tblTemp1 WHERE\ntblTemp1.fldOrder_ID > 100;"),(206,6,"UNION","UNION is implemented in MySQL 4.0.0.\n\nUNION is used to combine the result from many SELECT\nstatements into one result set.\n\nThe columns listed in the select_expression portion of the SELECT\nshould have the same type. The column names used in the first\nSELECT query will be used as the column names for the results\nreturned.\n","SELECT ...\nUNION [ALL]\nSELECT ...\n  [UNION\n   SELECT ...]"),(207,14,"TO_DAYS","   TO_DAYS(date)\nGiven a date date, returns a daynumber (the number of days since year\n0):\n","mysql> SELECT TO_DAYS(950501);\n        -> 728779\nmysql> SELECT TO_DAYS('1997-10-07');\n        -> 729669"),(208,22,"NOT REGEXP","   expr NOT REGEXP pat\n   expr NOT RLIKE pat\nSame as NOT (expr REGEXP pat).\n",""),(209,24,"NOT IN","   expr NOT IN (value,...)\nSame as NOT (expr IN (value,...)).\n","");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (210,19,"!","   NOT\n   !\nLogical NOT.\nEvaluates to 1 if the operand is 0,\nto 0 if the operand is non-zero,\nand NOT NULL returns NULL.\n","mysql> SELECT NOT 10;\n        -> 0\nmysql> SELECT NOT 0;\n        -> 1\nmysql> SELECT NOT NULL;\n        -> NULL\nmysql> SELECT ! (1+1);\n        -> 0\nmysql> SELECT ! 1+1;\n        -> 1"),(211,1,"DOUBLE","   DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]\n\nA normal-size (double-precision) floating-point number.\nAllowable values are -1.7976931348623157E+308 to\n-2.2250738585072014E-308, 0, and\n2.2250738585072014E-308 to 1.7976931348623157E+308.  If\nUNSIGNED is specified, negative values are disallowed.  The\nM is the display width and D is the number of decimals.\nDOUBLE without arguments or FLOAT(X) where 25 <= X\n<= 53 stands for a double-precision floating-point number.\n\n   DOUBLE PRECISION[(M,D)] [UNSIGNED] [ZEROFILL]\n   REAL[(M,D)] [UNSIGNED] [ZEROFILL]\n\nThese are synonyms for DOUBLE.\n",""),(212,1,"TIME","   TIME\n\nA time.  The range is '-838:59:59' to '838:59:59'.\nMySQL displays TIME values in 'HH:MM:SS' format, but\nallows you to assign values to TIME columns using either strings or\nnumbers. See also : [TIME, , TIME].\n",""),(213,19,"&&","   AND\n   &&\nLogical AND.\nEvaluates to 1 if all operands are non-zero and not NULL,\nto 0 if one or more operands are 0,\notherwise NULL is returned.\n","mysql> SELECT 1 && 1;\n        -> 1\nmysql> SELECT 1 && 0;\n        -> 0\nmysql> SELECT 1 && NULL;\n        -> NULL\nmysql> SELECT 0 && NULL;\n        -> 0\nmysql> SELECT NULL && 0;\n        -> 0"),(214,16,"X","   X(p)\nReturns the X-coordinate value for the point p as a double-precision\nnumber.\n","mysql> SELECT X(GeomFromText('Point(56.7 53.34)'));\n+--------------------------------------+\n| X(GeomFromText('Point(56.7 53.34)')) |\n+--------------------------------------+\n|                                 56.7 |\n+--------------------------------------+"),(215,1,"NUMERIC","   DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL]\n\nAn unpacked floating-point number.  Behaves like a\nCHAR column: ``unpacked'' means the number is stored as a string,\nusing one character for each digit of the value.  The decimal point and,\nfor negative numbers, the - sign, are not counted in M (but\nspace for these is reserved). If D is 0, values will have no decimal\npoint or fractional part.  The maximum range of DECIMAL values is\nthe same as for DOUBLE, but the actual range for a given\nDECIMAL column may be constrained by the choice of M and\nD.  If UNSIGNED is specified, negative values are disallowed.  \n\nIf D is omitted, the default is 0.  If M is omitted, the\ndefault is 10.\n\nPrior to MySQL Version 3.23, the M argument must include the space\nneeded for the sign and the decimal point.\n\n   DEC[(M[,D])] [UNSIGNED] [ZEROFILL]\n   NUMERIC[(M[,D])] [UNSIGNED] [ZEROFILL]\n   FIXED[(M[,D])] [UNSIGNED] [ZEROFILL]\n\nThese are synonyms for DECIMAL.\n\nThe FIXED alias was added in version 4.1.0 for compatibility\nwith other servers.\n",""),(216,20,"FOUND_ROWS","\nA SELECT statement may include a LIMIT clause to restrict the\nnumber of rows the server returns to the client.\nIn some cases, it is desirable to know how many rows the statement would have\nreturned without the LIMIT, but without running the statement again.\nTo get this row count, include a SQL_CALC_FOUND_ROWS option in the\nSELECT statement, then invoke FOUND_ROWS() afterward:\n","mysql> SELECT SQL_CALC_FOUND_ROWS * FROM tbl_name\n       WHERE id > 100 LIMIT 10;\nmysql> SELECT FOUND_ROWS();"),(217,11,"CROSSES","   Crosses(g1,g2)\nReturns 1 if g1 spatially crosses g2.\nReturns NULL if g1 is a Polygon or a MultiPolygon,\nor if g2 is a Point or a MultiPoint.\nOtherwise, returns 0.\n\nThe term spatially crosses denotes a spatial relation between two given\ngeometries that has the following properties:\n\n\n --- The two geometries intersect\n\n --- Their intersection results in a geometry that has\na dimension that is one less than the maximum dimension of the two given\ngeometries\n\n --- Their intersection is not equal to either of the two given geometries\n",""),(218,6,"TRUNCATE TABLE","In 3.23 TRUNCATE TABLE is mapped to\nCOMMIT; DELETE FROM table_name. See also : [DELETE].\n\nTRUNCATE TABLE differs from DELETE FROM ...\nin the following ways:\n\n --- Truncate operations drop and re-create the table, which is much faster\nthan deleting rows one by one.\n --- Truncate operations are not transaction-safe; you will get an error if you have an active\ntransaction or an active table lock.\n --- The number of deleted rows is not returned.\n --- As long as the table definition file *table_name.frm is\nvalid, the table can be re-created this way, even if the data or index\nfiles have become corrupted.\n\n\nTRUNCATE TABLE is an Oracle SQL extension.\nThis statement was added in MySQL 3.23.28, although from 3.23.28\nto 3.23.32, the keyword TABLE must be omitted.\n","TRUNCATE TABLE table_name"),(219,14,"CURRENT_DATE","   CURDATE()\n   CURRENT_DATE\n   CURRENT_DATE()\nReturns the current date as a value in 'YYYY-MM-DD' or YYYYMMDD\nformat, depending on whether the function is used in a string or numeric\ncontext:\n","mysql> SELECT CURDATE();\n        -> '1997-12-15'\nmysql> SELECT CURDATE() + 0;\n        -> 19971215"),(220,12,"BIT_XOR","   BIT_XOR(expr)\nReturns the bitwise XOR of all bits in expr. The calculation is\nperformed with 64-bit (BIGINT) precision.\n\nFunction returns 0 if there were no matching rows.\n",""),(221,0,"AREA","   Area(poly)\nReturns as a double-precision number the area of the Polygon value\npoly, as measured in its spatial reference system.\n","mysql> SELECT Area(GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))'));\n+----------------------------------------------------------------------------+\n| Area(GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))')) |\n+----------------------------------------------------------------------------+\n|                                                                          8 |\n+----------------------------------------------------------------------------+"),(222,7,"START SLAVE","START SLAVE [thread_name [, thread_name] ... ]\nSTART SLAVE [SQL_THREAD] UNTIL\n    MASTER_LOG_FILE = 'log_name', MASTER_LOG_POS = log_pos\nSTART SLAVE [SQL_THREAD] UNTIL\n    RELAY_LOG_FILE = 'log_name', RELAY_LOG_POS = log_pos\n\nthread_name = IO_THREAD | SQL_THREAD\n\nSTART SLAVE with no options starts both of the slave threads.\nThe I/O thread reads queries from the master server and stores them in the\nrelay log.  The SQL thread reads the relay log and executes the\nqueries.\nNote that if START SLAVE succeeds in starting the slave threads it\nwill return without any error. But even in that case it might be that slave\nthreads start and then later stop (because they don't manage to\nconnect to the master or read his binlogs or any other\nproblem). START SLAVE will not warn you about this. You must\ncheck your slave's error log for error messages generated by\nthe slave threads, or check that these are running fine with SHOW\nSLAVE STATUS.\n\nAs of MySQL 4.0.2, you can add IO_THREAD or SQL_THREAD\noptions to the statement to name which of the threads to start.\n\nAs of MySQL 4.1.1, an UNTIL clause may be added to specify that\nthe slave should start until the SQL thread reaches a given point in\nthe master binlogs or in the slave relay logs. When the SQL thread reaches\nthat point, it stops.  If the SQL_THREAD option is specified in the\nstatement, it starts only the SQL thread.  Otherwise, it starts both slave\nthreads.  If the SQL thread is already running, the UNTIL clause is\nignored and a warning is issued.\n\nWith an UNTIL clause, you must specify both a log filename and\nposition. Do not mix master and relay log options.\n\nAny UNTIL condition is reset by a subsequent STOP SLAVE\nstatement, or a START SLAVE statement that includes no UNTIL\nclause, or a server restart.\n\nThe UNTIL clause can be useful for debugging replication, or to\ncause replication to proceed until just before the point where you want\nto avoid having the slave replicated a statement. For example, if an unwise\nDROP TABLE statement was executed on the master, you can use\nUNTIL to tell the slave to execute up to that point but no farther.\nTo find what the event is, use mysqlbinlog with the master logs or\nrelay logs, or by using a SHOW BINLOG EVENTS statement.\n\nIf you are using UNTIL to have the slave process replicated queries in\nsections, it is recommended that you start the slave with the\n--skip-slave-start option to prevent the SQL thread from running\nwhen the slave starts.  It's probably best to use this option in an option\nfile rather than on the command line, so that an unexpected server restart does\nnot cause it to be forgotten.\n\nThe SHOW SLAVE STATUS statement includes output fields that display\nthe current values of the UNTIL condition.\n\nThis command is called SLAVE START before MySQL 4.0.5.\nFor the moment, SLAVE START is still accepted for backward\ncompatibility, but is deprecated.\n",""),(223,7,"DESCRIBE","{DESCRIBE | DESC} tbl_name [col_name | wild]\n\nDESCRIBE is a shortcut for SHOW COLUMNS FROM.\n",""),(224,22,"SUBSTRING","   SUBSTRING(str,pos)\n   SUBSTRING(str FROM pos)\nReturns a substring from string str starting at position pos:\n","mysql> SELECT SUBSTRING('Quadratically',5);\n        -> 'ratically'\nmysql> SELECT SUBSTRING('foobarbar' FROM 4);\n        -> 'barbar'");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (225,18,"ISEMPTY","   IsEmpty(g)\nReturns 1 if the geomtry value g is the empty geometry, 0 if it is not\nempty, and @minus{}1 if the argument is NULL.\nIf the geometry is empty, it represents the empty point set.\n",""),(226,22,"LTRIM","   LTRIM(str)\nReturns the string str with leading space characters removed:\n","mysql> SELECT LTRIM('  barbar');\n        -> 'barbar'"),(227,27,"REPAIR","REPAIR TABLE works only on MyISAM tables and is the same\nas running myisamchk -r table_name on the table.\n","REPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name[,tbl_name...] [QUICK] [EXTENDED] [USE_FRM]"),(228,11,"INTERSECTS","   Intersects(g1,g2)\nReturns 1 or 0 to indicate whether or not g1 spatially intersects\ng2.\n",""),(229,8,"MBRDISJOINT","   MBRDisjoint(g1,g2)\nReturns 1 or 0 to indicate whether or not the Minimum Bounding Rectangles of\nthe two geometries g1 and g2 are disjoint (do not intersect).\n",""),(230,22,"SUBSTRING_INDEX","   SUBSTRING_INDEX(str,delim,count)\nReturns the substring from string str before count\noccurrences of the delimiter delim.\nIf count is positive, everything to the left of the final delimiter\n(counting from the left) is returned.\nIf count is negative, everything to the right of the final delimiter\n(counting from the right) is returned:\n","mysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', 2);\n        -> 'www.mysql'\nmysql> SELECT SUBSTRING_INDEX('www.mysql.com', '.', -2);\n        -> 'mysql.com'"),(231,20,"ENCODE","   ENCODE(str,pass_str)\nEncrypt str using pass_str as the password.\nTo decrypt the result, use DECODE().\n\nThe results is a binary string of the same length as string.\nIf you want to save it in a column, use a BLOB column type.\n",""),(232,4,"TRUNCATE","   TRUNCATE(X,D)\nReturns the number X, truncated to D decimals.  If D\nis 0, the result will have no decimal point or fractional part:\n","mysql> SELECT TRUNCATE(1.223,1);\n        -> 1.2\nmysql> SELECT TRUNCATE(1.999,1);\n        -> 1.9\nmysql> SELECT TRUNCATE(1.999,0);\n        -> 1\nmysql> SELECT TRUNCATE(-1.999,1);\n        -> -1.9"),(233,7,"SHOW","SHOW provides information about databases, tables, columns, or\nstatus information about the server. If the LIKE wild part is\nused, the wild string can be a string that uses the SQL %\nand _ wildcard characters.\n","   SHOW DATABASES [LIKE wild]\nor SHOW [OPEN] TABLES [FROM db_name] [LIKE wild]\nor SHOW [FULL] COLUMNS FROM tbl_name [FROM db_name] [LIKE wild]\nor SHOW INDEX FROM tbl_name [FROM db_name]\nor SHOW TABLE STATUS [FROM db_name] [LIKE wild]\nor SHOW STATUS [LIKE wild]\nor SHOW VARIABLES [LIKE wild]\nor SHOW [BDB] LOGS\nor SHOW [FULL] PROCESSLIST\nor SHOW GRANTS FOR user\nor SHOW CREATE TABLE table_name\nor SHOW MASTER STATUS\nor SHOW MASTER LOGS\nor SHOW SLAVE STATUS\nor SHOW WARNINGS [LIMIT row_count]\nor SHOW ERRORS [LIMIT row_count]\nor SHOW TABLE TYPES"),(234,4,"GREATEST","   GREATEST(X,Y,...)\nReturns the largest (maximum-valued) argument.\nThe arguments are compared using the same rules as for LEAST:\n","mysql> SELECT GREATEST(2,0);\n        -> 2\nmysql> SELECT GREATEST(34.0,3.0,5.0,767.0);\n        -> 767.0\nmysql> SELECT GREATEST(\"B\",\"A\",\"C\");\n        -> \"C\""),(235,14,"SECOND","   SECOND(time)\nReturns the second for time, in the range 0 to 59:\n","mysql> SELECT SECOND('10:05:03');\n        -> 3"),(236,12,"BIT_AND","   BIT_AND(expr)\nReturns the bitwise AND of all bits in expr. The calculation is\nperformed with 64-bit (BIGINT) precision.\n\nFunction returns -1 if there were no matching rows.\n  \n\n  @subsubsection GROUP BY Modifiers\n\n\n\n\n\nAs of MySQL 4.1.1, the GROUP BY clause allows a WITH\nROLLUP modifier that causes extra rows to be added to the summary\noutput. These rows represent higher-level (or super-aggregate) summary\noperations. ROLLUP thus allows you to answer questions at multiple\nlevels of analysis with a single query. It can be used, for example,\nto provide support for OLAP (Online Analytical Processing) operations.\n\nAs an illustration, suppose that a table named sales has year,\ncountry,\nproduct, and profit columns for recording sales profitability:\n\nCREATE TABLE sales\n(\n    year    INT NOT NULL,\n    country VARCHAR(20) NOT NULL,\n    product VARCHAR(32) NOT NULL,\n    profit  INT\n);\n\nThe table's contents can be summarized per year with a simple GROUP BY\nlike this:\n\nmysql> SELECT year, SUM(profit) FROM sales GROUP BY year;\n+------+-------------+\n| year | SUM(profit) |\n+------+-------------+\n| 2000 |        4525 |\n| 2001 |        3010 |\n+------+-------------+\n\nThis output shows the total profit for each year, but if you also want\nto determine the total profit summed over all years, you must add up\nthe individual values yourself or run an additional query.\n\nOr you can use ROLLUP, which provides both levels of analysis with a\nsingle query.\nAdding a WITH ROLLUP modifier to the GROUP BY clause causes the query\nto produce another row that shows the grand total over all year values:\n\nmysql> SELECT year, SUM(profit) FROM sales GROUP BY year WITH ROLLUP;\n+------+-------------+\n| year | SUM(profit) |\n+------+-------------+\n| 2000 |        4525 |\n| 2001 |        3010 |\n| NULL |        7535 |\n+------+-------------+\n\nThe grand total super-aggregate line is identified by the value NULL in\nthe year column.\n\nROLLUP has a more complex effect when there are multiple GROUP BY\ncolumns. In this case, each time there is a ``break'' (change in value)\nin any but the last grouping column, the query produces an extra\nsuper-aggregate summary row.\n\nFor example, without ROLLUP, a summary on the sales table based\non year,\ncountry, and product might look like this:\n\nmysql> SELECT year, country, product, SUM(profit)\n    -> FROM sales\n    -> GROUP BY year, country, product;\n+------+---------+------------+-------------+\n| year | country | product    | SUM(profit) |\n+------+---------+------------+-------------+\n| 2000 | Finland | Computer   |        1500 |\n| 2000 | Finland | Phone      |         100 |\n| 2000 | India   | Calculator |         150 |\n| 2000 | India   | Computer   |        1200 |\n| 2000 | USA     | Calculator |          75 |\n| 2000 | USA     | Computer   |        1500 |\n| 2001 | Finland | Phone      |          10 |\n| 2001 | USA     | Calculator |          50 |\n| 2001 | USA     | Computer   |        2700 |\n| 2001 | USA     | TV         |         250 |\n+------+---------+------------+-------------+\n\nThe output indicates summary values only at the year/country/product level of\nanalysis.  When ROLLUP is added, the query produces several extra rows:\n\nmysql> SELECT year, country, product, SUM(profit)\n    -> FROM sales\n    -> GROUP BY year, country, product WITH ROLLUP;\n+------+---------+------------+-------------+\n| year | country | product    | SUM(profit) |\n+------+---------+------------+-------------+\n| 2000 | Finland | Computer   |        1500 |\n| 2000 | Finland | Phone      |         100 |\n| 2000 | Finland | NULL       |        1600 |\n| 2000 | India   | Calculator |         150 |\n| 2000 | India   | Computer   |        1200 |\n| 2000 | India   | NULL       |        1350 |\n| 2000 | USA     | Calculator |          75 |\n| 2000 | USA     | Computer   |        1500 |\n| 2000 | USA     | NULL       |        1575 |\n| 2000 | NULL    | NULL       |        4525 |\n| 2001 | Finland | Phone      |          10 |\n| 2001 | Finland | NULL       |          10 |\n| 2001 | USA     | Calculator |          50 |\n| 2001 | USA     | Computer   |        2700 |\n| 2001 | USA     | TV         |         250 |\n| 2001 | USA     | NULL       |        3000 |\n| 2001 | NULL    | NULL       |        3010 |\n| NULL | NULL    | NULL       |        7535 |\n+------+---------+------------+-------------+\n\nFor this query, adding ROLLUP causes the output to include summary\ninformation at four levels of analysis, not just one.  Here's how to\ninterpret the ROLLUP output:\n\n\n --- Following each set of product rows for a given year and country, an\nextra summary row is produced showing the total for all products. These rows\nhave the product column set to NULL.\n\n --- Following each set of rows for a given year, an extra summary row is\nproduced showing the total for all countries and products. These rows\nhave the country and products columns set to NULL.\n\n --- Finally, following all other rows, an extra summary row is produced\nshowing the grand total for all years, countries, and products. This\nrow has the year, country, and products columns set to\nNULL.\n\n\nOther Considerations When using ROLLUP\n\nThe following items list some behaviours specific to the MySQL implementation\nof ROLLUP:\n\nWhen you use ROLLUP, you cannot also use an ORDER BY clause to\nsort the results. (In other words, ROLLUP and ORDER BY are mutually\nexclusive.) However, you still have some control over sort order.\nGROUP BY\nin MySQL sorts results, and you can use explicit ASC and DESC keywords\nwith columns named in the GROUP BY list to specify sort order for\nindividual columns.  (The higher-level summary rows added by ROLLUP\nstill appear after the rows from which they are calculated, regardless\nof the sort order.)\n\nLIMIT can be used to restrict the number of rows returned to the\nclient. LIMIT is applied after ROLLUP, so the limit applies\nagainst the extra rows added by ROLLUP. For example:\n\nmysql> SELECT year, country, product, SUM(profit)\n    -> FROM sales\n    -> GROUP BY year, country, product WITH ROLLUP\n    -> LIMIT 5;\n+------+---------+------------+-------------+\n| year | country | product    | SUM(profit) |\n+------+---------+------------+-------------+\n| 2000 | Finland | Computer   |        1500 |\n| 2000 | Finland | Phone      |         100 |\n| 2000 | Finland | NULL       |        1600 |\n| 2000 | India   | Calculator |         150 |\n| 2000 | India   | Computer   |        1200 |\n+------+---------+------------+-------------+\n\nNote that using LIMIT with ROLLUP may produce results\nthat are more difficult to interpret, because you have less context\nfor understanding the super-aggregate rows.\n\nThe NULL indicators in each super-aggregate row are produced when the\nrow is sent to the client.  The server looks at the columns named in\nthe GROUP BY clause following the leftmost one that has changed value.\nFor any column in the result set with a name that is a lexical match to\nany of those names, its value is set to NULL.  (If you specify grouping\ncolumns by column number, the server identifies which columns to set to\nNULL by number.)\n\nBecause the NULL values in the super-aggregate rows are placed into the\nresult set at such a late stage in query processing, you cannot test them\nas NULL values within the query itself.  For example, you cannot add\nHAVING product IS NULL to the query to eliminate from the output all\nbut the super-aggregate rows.\n\nOn the other hand, the NULL values do appear as NULL\non the client side and can be tested as such using any MySQL client\nprogramming interface.\n\n  @subsubsection GROUP BY with Hidden Fields\n\nMySQL has extended the use of GROUP BY. You can use columns or\ncalculations in the SELECT expressions that don't appear in\nthe GROUP BY part. This stands for /any possible value for this\ngroup/.  You can use this to get better performance by avoiding sorting and\ngrouping on unnecessary items.  For example, you don't need to group on\ncustomer.name in the following query:\n","mysql> SELECT order.custid,customer.name,MAX(payments)\n    ->        FROM order,customer\n    ->        WHERE order.custid = customer.custid\n    ->        GROUP BY order.custid;"),(237,4,"ATAN2","   ATAN(Y,X)\n   ATAN2(Y,X)\nReturns the arc tangent of the two variables X and Y. It is\nsimilar to calculating the arc tangent of Y / X, except that the\nsigns of both arguments are used to determine the quadrant of the\nresult:\n","mysql> SELECT ATAN(-2,2);\n        -> -0.785398\nmysql> SELECT ATAN2(PI(),0);\n        -> 1.570796"),(238,8,"MBRCONTAINS","   MBRContains(g1,g2)\nReturns 1 or 0 to indicate whether or not the Minimum Bounding Rectangle of\ng1 contains the Minimum Bounding Rectangle of g2.\n","mysql> SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = GeomFromText('Point(1 1)');\nmysql> SELECT MBRContains(@g1,@g2), MBRContains(@g2,@g1);\n----------------------+----------------------+\n| MBRContains(@g1,@g2) | MBRContains(@g2,@g1) |\n+----------------------+----------------------+\n|                    1 |                    0 |\n+----------------------+----------------------+"),(239,14,"HOUR","   HOUR(time)\nReturns the hour for time. The range of the return value will be\n0 to 23 for time-of-day values:\n","mysql> SELECT HOUR('10:05:03');\n        -> 10");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (240,1,"TYPE SET","   SET('value1','value2',...)\n\nA set.  A string object that can have zero or more values, each of which must\nbe chosen from the list of values 'value1', 'value2',\n... A SET can have a maximum of 64 members. See also : [SET].\n  \n",""),(241,4,"COT","   COT(X)\nReturns the cotangent of X:\n","mysql> SELECT COT(12);\n        -> -1.57267341\nmysql> SELECT COT(0);\n        -> NULL"),(242,6,"SELECT","SELECT is used to retrieve rows selected from one or more tables.\nEach select_expression indicates a column you want to retrieve.\nSELECT may also be used to retrieve rows computed without reference to\nany table.  \n","SELECT [STRAIGHT_JOIN]\n       [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]\n       [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS] [HIGH_PRIORITY]\n       [DISTINCT | DISTINCTROW | ALL]\n    select_expression,...\n    [INTO {OUTFILE | DUMPFILE} 'file_name' export_options]\n    [FROM table_references\n      [WHERE where_definition]\n      [GROUP BY {unsigned_integer | col_name | formula} [ASC | DESC], ...\n        [WITH ROLLUP]]\n      [HAVING where_definition]\n      [ORDER BY {unsigned_integer | col_name | formula} [ASC | DESC] ,...]\n      [LIMIT [offset,] row_count | row_count OFFSET offset]\n      [PROCEDURE procedure_name(argument_list)]\n      [FOR UPDATE | LOCK IN SHARE MODE]]"),(243,27,"BACKUP TABLE","Copies to the backup directory the minimum number of table files needed\nto restore the table, after flushing any buffered changes to disk. Currently\nworks only for MyISAM tables.\nFor MyISAM tables, copies *.frm (definition)  and\n*.MYD (data) files. The index file can be rebuilt from those two.\n","BACKUP TABLE tbl_name[,tbl_name...] TO '/path/to/backup/directory'"),(244,22,"LOAD_FILE","   LOAD_FILE(file_name)\nReads the file and returns the file contents as a string.  The file\nmust be on the server, you must specify the full pathname to the\nfile, and you must have the FILE privilege.  The file must\nbe readable by all and be smaller than max_allowed_packet.\n\nIf the file doesn't exist or can't be read due to one of the above reasons,\nthe function returns NULL:\n","mysql> UPDATE tbl_name\n           SET blob_column=LOAD_FILE(\"/tmp/picture\")\n           WHERE id=1;"),(245,3,"POINTFROMTEXT","   PointFromText(wkt[,srid])\nConstructs a POINT value using its WKT representation and SRID.\n",""),(246,7,"LOAD TABLE FROM MASTER","LOAD TABLE tbl_name FROM MASTER\n\nDownloads a copy of the table from master to the slave. This statement is\nmplemented mainly for debugging of LOAD DATA FROM MASTER.\nRequires that the account used for connecting to the master server have\nRELOAD and SUPER privileges on the master, and\nSELECT on the master table to load.\nOn the slave's side, the user which issues LOAD TABLE FROM MASTER should\nhave grants to drop and create the table.\nPlease read the timeout notes in the description of LOAD DATA\nFROM MASTER above; they apply here, too. Please also read the\nlimitations of LOAD DATA FROM MASTER above, they apply too (for\nexample, LOAD TABLE FROM MASTER only works for MyISAM\ntables).\n",""),(247,12,"GROUP_CONCAT","   GROUP_CONCAT(expr)\nFull syntax:\nGROUP_CONCAT([DISTINCT] expr [,expr ...]\n             [ORDER BY {unsigned_integer | col_name | formula} [ASC | DESC] [,col ...]]\n             [SEPARATOR str_val])\nThis function was added in MySQL version 4.1.\nIt returns a string result with the concatenated values from a group:\n","mysql> SELECT student_name,\n    ->        GROUP_CONCAT(test_score)\n    ->        FROM student \n    ->        GROUP BY student_name;\nor\nmysql> SELECT student_name,\n    ->        GROUP_CONCAT(DISTINCT test_score\n    ->                     ORDER BY test_score DESC SEPARATOR \" \")\n    ->        FROM student\n    ->        GROUP BY student_name;"),(248,14,"DATE_FORMAT","   DATE_FORMAT(date,format)\nFormats the date value according to the format string. The\nfollowing specifiers may be used in the format string:\n     Specifier 	 Description\n   %M 	 Month name (January..December)\n   %W 	 Weekday name (Sunday..Saturday)\n   %D 	 Day of the month with English suffix (0th, 1st, 2nd, 3rd, etc.)\n   %Y 	 Year, numeric, 4 digits\n   %y 	 Year, numeric, 2 digits\n   %X 	 Year for the week where Sunday is the first day of the week, numeric, 4 digits; used with %V\n   %x 	 Year for the week, where Monday is the first day of the week, numeric, 4 digits; used with %v\n   %a 	 Abbreviated weekday name (Sun..Sat)\n   %d 	 Day of the month, numeric (00..31)\n   %e 	 Day of the month, numeric (0..31)\n   %m 	 Month, numeric (00..12)\n   %c 	 Month, numeric (0..12)\n   %b 	 Abbreviated month name (Jan..Dec)\n   %j 	 Day of year (001..366)\n   %H 	 Hour (00..23)\n   %k 	 Hour (0..23)\n   %h 	 Hour (01..12)\n   %I 	 Hour (01..12)\n   %l 	 Hour (1..12)\n   %i 	 Minutes, numeric (00..59)\n   %r 	 Time, 12-hour (hh:mm:ss followed by AM or PM)\n   %T 	 Time, 24-hour (hh:mm:ss)\n   %S 	 Seconds (00..59)\n   %s 	 Seconds (00..59)\n   %f 	 Microseconds (000000..999999)\n   %p 	 AM or PM\n   %w 	 Day of the week (0=Sunday..6=Saturday)\n   %U 	 Week (00..53), where Sunday is the first day of the week\n   %u 	 Week (00..53), where Monday is the first day of the week\n   %V 	 Week (01..53), where Sunday is the first day of the week; used with %X\n   %v 	 Week (01..53), where Monday is the first day of the week; used with %x\n   %% 	 A literal %.\n  \n\nAll other characters are just copied to the result without interpretation.\n\nThe %f format specifier is available as of MySQL 4.1.1.\n\nAs of MySQL Version 3.23, the % character is required before\nformat specifier characters.  In earlier versions of MySQL,\n% was optional.\n\nThe reason the ranges for the month and day specifiers begin with zero\nis that MySQL allows incomplete dates such as '2004-00-00' to be\nstored as of MySQL 3.23.\n","mysql> SELECT DATE_FORMAT('1997-10-04 22:23:00', '%W %M %Y');\n        -> 'Saturday October 1997'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00', '%H:%i:%s');\n        -> '22:23:00'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n                          '%D %y %a %d %m %b %j');\n        -> '4th 97 Sat 04 10 Oct 277'\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00',\n                          '%H %k %I %r %T %S %w');\n        -> '22 22 10 10:23:00 PM 22:23:00 00 6'\nmysql> SELECT DATE_FORMAT('1999-01-01', '%X %V');\n        -> '1998 52'"),(249,20,"BENCHMARK","   BENCHMARK(count,expr)\nThe BENCHMARK() function executes the expression expr\nrepeatedly count times.  It may be used to time how fast MySQL\nprocesses the expression.  The result value is always 0.  The intended\nuse is in the mysql client, which reports query execution times:\n","mysql> SELECT BENCHMARK(1000000,ENCODE(\"hello\",\"goodbye\"));\n+----------------------------------------------+\n| BENCHMARK(1000000,ENCODE(\"hello\",\"goodbye\")) |\n+----------------------------------------------+\n|                                            0 |\n+----------------------------------------------+\n1 row in set (4.74 sec)"),(250,14,"YEAR","   YEAR(date)\nReturns the year for date, in the range 1000 to 9999:\n","mysql> SELECT YEAR('98-02-03');\n        -> 1998"),(251,20,"RELEASE_LOCK","   RELEASE_LOCK(str)\nReleases the lock named by the string str that was obtained with\nGET_LOCK(). Returns 1 if the lock was released, 0 if the\nlock wasn't locked by this thread (in which case the lock is not released),\nand NULL if the named lock didn't exist.  (The lock will not exist if\nit was never obtained by a call to GET_LOCK() or if it already has\nbeen released.)\n\nThe DO statement is convinient to use with RELEASE_LOCK().\nSee also : [DO].\n",""),(252,24,"IS NULL","   IS NULL\n   IS NOT NULL\nTest whether a value is or is not NULL:\n","mysql> SELECT 1 IS NULL, 0 IS NULL, NULL IS NULL;\n        -> 0 0 1\nmysql> SELECT 1 IS NOT NULL, 0 IS NOT NULL, NULL IS NOT NULL;\n        -> 1 1 0"),(253,14,"WEEKDAY","   WEEKDAY(date)\nReturns the weekday index for\ndate (0 = Monday, 1 = Tuesday, ... 6 = Sunday):\n","mysql> SELECT WEEKDAY('1998-02-03 22:23:00');\n        -> 1\nmysql> SELECT WEEKDAY('1997-11-05');\n        -> 2"),(254,14,"TIME_TO_SEC","   TIME_TO_SEC(time)\nReturns the time argument, converted to seconds:\n","mysql> SELECT TIME_TO_SEC('22:23:00');\n        -> 80580\nmysql> SELECT TIME_TO_SEC('00:39:38');\n        -> 2378");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (255,22,"EXPORT_SET","   EXPORT_SET(bits,on,off,[separator,[number_of_bits]])\nReturns a string where for every bit set in 'bit', you get an 'on' string\nand for every reset bit you get an 'off' string. Each string is separated\nwith 'separator' (default ',') and only 'number_of_bits' (default 64) of\n'bits' is used:\n","mysql> SELECT EXPORT_SET(5,'Y','N',',',4)\n        -> Y,N,Y,N"),(256,14,"TIME FUNCTION","   TIME(expr)\n\nExtracts the time part of the time or datetime expression expr.\n","mysql> SELECT TIME('2003-12-31 01:02:03');\n        -> '01:02:03'\nmysql> SELECT TIME('2003-12-31 01:02:03.000123');\n        -> '01:02:03.000123'"),(257,14,"CAST","The CAST() and CONVERT() functions may be used to take a\nvalue of one type and produce a value of another type.  Their syntax is:\n\n\nCAST(expression AS type)\nCONVERT(expression,type)\nCONVERT(expr USING transcoding_name)\n\nThe type value can be one of the following:\n --- BINARY\n --- CHAR\n --- DATE\n --- DATETIME\n --- SIGNED {INTEGER}\n --- TIME\n --- UNSIGNED {INTEGER}\n\nCAST() and CONVERT() are available as of MySQL 4.0.2.\nThe CHAR conversion type is available as of 4.0.6.\nThe USING form of CONVERT() is available as of 4.1.0.\n\nCAST() and CONVERT(... USING ...) are SQL-99 syntax.\nThe non-USING form of CONVERT() is ODBC syntax.\n\nThe cast functions are useful when you want to create a column with\na specific type in a CREATE ... SELECT statement:\n","SELECT enum_col FROM tbl_name ORDER BY CAST(enum_col AS CHAR);"),(258,22,"SOUNDS LIKE","   expr SOUNDS LIKE expr\nSame as SOUNDEX(expr)=SOUNDEX(expr) (available only in version 4.1 or later). \n",""),(259,14,"PERIOD_DIFF","   PERIOD_DIFF(P1,P2)\nReturns the number of months between periods P1 and P2.\nP1 and P2 should be in the format YYMM or YYYYMM.\n\nNote that the period arguments P1 and P2 are not\ndate values:\n","mysql> SELECT PERIOD_DIFF(9802,199703);\n        -> 11"),(260,22,"LIKE","   expr LIKE pat [ESCAPE 'escape-char']\nPattern matching using\nSQL simple regular expression comparison. Returns 1 (TRUE) or 0\n(FALSE).  With LIKE you can use the following two wildcard characters\nin the pattern:\n\n     Char 	 Description\n   % 	 Matches any number of characters, even zero characters\n   _ 	 Matches exactly one character\n  \n","mysql> SELECT 'David!' LIKE 'David_';\n        -> 1\nmysql> SELECT 'David!' LIKE '%D%v%';\n        -> 1"),(261,2,"MULTIPOINT","   MultiPoint(pt1,pt2,...)\nConstructs a WKB MultiPoint value using WKB Point arguments.\nIf any argument is not a WKBPoint, the return value is NULL.\n",""),(262,25,">>","   >>\nShifts a longlong (BIGINT) number to the right:\n","mysql> SELECT 4 >> 2;\n        -> 1"),(263,21,"TRUE FALSE","TRUE and FALSE added as alias for 1 and 0, respectively.\n",""),(264,12,"AVG","   AVG(expr)\nReturns the average value of expr:\n","mysql> SELECT student_name, AVG(test_score)\n    ->        FROM student\n    ->        GROUP BY student_name;"),(265,8,"MBRWITHIN","   MBRWithin(g1,g2)\nReturns 1 or 0 to indicate whether or not the Minimum Bounding Rectangle\nof g1 is within the Minimum Bounding Rectangle of g2.\n","mysql> SET @g1 = GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0))');\nmysql> SET @g2 = GeomFromText('Polygon((0 0,0 5,5 5,5 0,0 0))');\nmysql> SELECT MBRWithin(@g1,@g2), MBRWithin(@g2,@g1);\n+--------------------+--------------------+\n| MBRWithin(@g1,@g2) | MBRWithin(@g2,@g1) |\n+--------------------+--------------------+\n|                  1 |                  0 |\n+--------------------+--------------------+"),(266,24,"IN","   expr IN (value,...)\nReturns 1 if expr is any of the values in the IN list,\nelse returns 0.  If all values are constants, then all values are\nevaluated according to the type of expr and sorted. The search for the\nitem is then done using a binary search. This means IN is very quick\nif the IN value list consists entirely of constants.  If expr\nis a case-sensitive string expression, the string comparison is performed in\ncase-sensitive fashion:\n","mysql> SELECT 2 IN (0,3,5,'wefwf');\n        -> 0\nmysql> SELECT 'wefwf' IN (0,3,5,'wefwf');\n        -> 1"),(267,22,"QUOTE","   QUOTE(str)\nQuotes a string to produce a result that can be used as a properly escaped\ndata value in an SQL statement.  The string is returned surrounded by single\nquotes and with each instance of single quote ('), backslash (\\),\nASCII NUL, and Control-Z preceded by a backslash.  If the argument is\nNULL, the return value is the word ``NULL'' without surrounding\nsingle quotes.\nThe QUOTE() function was added in MySQL version 4.0.3.\n","mysql> SELECT QUOTE(\"Don't\");\n        -> 'Don\\'t!'\nmysql> SELECT QUOTE(NULL);\n        -> NULL"),(268,20,"SESSION_USER","   USER()\n   SYSTEM_USER()\n   SESSION_USER()\nReturns the current MySQL username and hostname:\n","mysql> SELECT USER();\n        -> 'davida@localhost'"),(269,14,"QUARTER","   QUARTER(date)\nReturns the quarter of the year for date, in the range 1\nto 4:\n","mysql> SELECT QUARTER('98-04-01');\n        -> 2");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (270,22,"POSITION","   LOCATE(substr,str)\n   POSITION(substr IN str)\nReturns the position of the first occurrence of substring substr\nin string str. Returns 0 if substr is not in str:\n","mysql> SELECT LOCATE('bar', 'foobarbar');\n        -> 4\nmysql> SELECT LOCATE('xbar', 'foobar');\n        -> 0"),(271,3,"POLYFROMTEXT","   PolyFromText(wkt[,srid])\n   PolygonFromText(wkt[,srid])\nConstructs a POLYGON value using its WKT representation and SRID.\n",""),(272,20,"DES_ENCRYPT","   DES_ENCRYPT(string_to_encrypt [, (key_number | key_string) ] )\n\nEncrypts the string with the given key using the Triple-DES algorithm.\n\nNote that this function only works if MySQL has been configured with\nSSL support. See also : [Secure connections].\n\nThe encryption key to use is chosen the following way:\n\n     Argument 	 Description\n   Only one argument 	\nThe first key from des-key-file is used.\n   key number 	\nThe given key (0-9) from the des-key-file is used.\n   string 	\nThe given key_string will be used to crypt string_to_encrypt.\n  \n\nThe return string will be a binary string where the first character\nwill be CHAR(128 | key_number).\n\nThe 128 is added to make it easier to recognise an encrypted key.\nIf you use a string key, key_number will be 127.\n\nOn error, this function returns NULL.\n\nThe string length for the result will be\nnew_length= org_length + (8-(org_length % 8))+1.\n\nThe des-key-file has the following format:\n","key_number des_key_string\nkey_number des_key_string"),(273,22,"LENGTH","   LENGTH(str)\n   OCTET_LENGTH(str)\n   CHAR_LENGTH(str)\n   CHARACTER_LENGTH(str)\nReturns the length of the string str:\n","mysql> SELECT LENGTH('text');\n        -> 4\nmysql> SELECT OCTET_LENGTH('text');\n        -> 4"),(274,14,"STR_TO_DATE","   STR_TO_DATE(str,format)\nThis is the reverse function of the DATE_FORMAT() function. It takes a \nstring str, and a format string format, and returns a \nDATETIME value.\nThe date, time, or datetime values contained in str should be given \nin the format indicated by format. For the specifiers that can be \nused in format, see the table in the DATE_FORMAT() function \ndescription. All other characters are just taken verbatim, thus not being \ninterpreted.\nIf str contains an illegal date, time, or datetime value, \nSTR_TO_DATE() returns NULL.\n","@c next example commented out until format string becomes optional\n@c mysql> SELECT STR_TO_DATE('2003-10-03')\n@c         -> 2003-10-03 00:00:00\nmysql> SELECT STR_TO_DATE('03.10.2003 09.20', '%d.%m.%Y %H.%i')\n        -> 2003-10-03 09:20:00\nmysql> SELECT STR_TO_DATE('10rap', '%crap')\n        -> 0000-10-00 00:00:00\nmysql> SELECT STR_TO_DATE('2003-15-10 00:00:00', '%Y-%m-%d %H:%i:%s')\n        -> NULL"),(275,16,"Y","   Y(p)\nReturns the Y-coordinate value for the point p as a double-precision\nnumber.\n","mysql> SELECT Y(GeomFromText('Point(56.7 53.34)'));\n+--------------------------------------+\n| Y(GeomFromText('Point(56.7 53.34)')) |\n+--------------------------------------+\n|                                53.34 |\n+--------------------------------------+"),(276,0,"INTERIORRINGN","   InteriorRingN(poly,n)\nReturns the n-th interior ring for the Polygon value\npoly as a LineString.\nRing numbers begin at 1.\n","mysql> SELECT AsText(InteriorRingN(GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))'),1));\n+-----------------------------------------------------------------------------------------------+\n| AsText(InteriorRingN(GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))'),1)) |\n+-----------------------------------------------------------------------------------------------+\n| LINESTRING(1 1,1 2,2 2,2 1,1 1)                                                               |\n+-----------------------------------------------------------------------------------------------+"),(277,0,"NUMINTERIORRINGS","   NumInteriorRings(poly)\nReturns the number of interior rings in the Polygon value poly.\n","mysql> SELECT NumInteriorRings(GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))'));\n+----------------------------------------------------------------------------------------+\n| NumInteriorRings(GeomFromText('Polygon((0 0,0 3,3 3,3 0,0 0),(1 1,1 2,2 2,2 1,1 1))')) |\n+----------------------------------------------------------------------------------------+\n|                                                                                      1 |\n+----------------------------------------------------------------------------------------+"),(278,14,"UTC_TIME","   UTC_TIME\n   UTC_TIME()\nReturns the current UTC time as a value in 'HH:MM:SS' or HHMMSS\nformat, depending on whether the function is used in a string or numeric\ncontext:\n","mysql> SELECT UTC_TIME(), UTC_TIME() + 0;\n        -> '18:07:53', 180753"),(279,12,"STDDEV","   STD(expr)\n   STDDEV(expr)\nReturns the standard deviation of expr (the square root of\nVARIANCE(). This is an extension to SQL-99. The STDDEV()\nform of this function is provided for Oracle compatibility.\n",""),(280,14,"PERIOD_ADD","   PERIOD_ADD(P,N)\nAdds N months to period P (in the format YYMM or\nYYYYMM). Returns a value in the format YYYYMM.\n\nNote that the period argument P is not a date value:\n","mysql> SELECT PERIOD_ADD(9801,2);\n        -> 199803"),(281,25,"|","   |\nBitwise OR\n","mysql> SELECT 29 | 15;\n        -> 31"),(282,3,"GEOMFROMTEXT","   GeomFromText(wkt[,srid])\n   GeometryFromText(wkt[,srid])\nConstructs a geometry value of any type using its WKT representation and SRID.\n",""),(283,22,"RIGHT","   RIGHT(str,len)\nReturns the rightmost len characters from the string str:\n","mysql> SELECT RIGHT('foobarbar', 4);\n        -> 'rbar'"),(284,22,"BIN","   BIN(N)\nReturns a string representation of the binary value of N, where\nN is a longlong (BIGINT) number.  This is equivalent to\nCONV(N,10,2).  Returns NULL if N is NULL:\n","mysql> SELECT BIN(12);\n        -> '1100'");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (285,2,"MULTILINESTRING","   MultiLineString(ls1,ls2,...)\nConstructs a WKB MultiLineString value using using WBK LineString\narguments.  If any argument is not a LineString, the return\nvalue is NULL.\n",""),(286,6,"LOAD DATA","The LOAD DATA INFILE statement reads rows from a text file into a\ntable at a very high speed.  If the LOCAL keyword is specified, it is\ninterpreted with respect to the client end of the connection. When\nLOCAL is specified, the file is read by the client program on the client\nhost and sent to the server.  If LOCAL is not specified, the\nfile must be located on the server host and is read directly by the server.\n(LOCAL is available in MySQL Version 3.22.6 or later.)\n\nFor security reasons, when reading text files located on the server, the\nfiles must either reside in the database directory or be readable by all.\nAlso, to use LOAD DATA INFILE on server files, you must have the\nFILE privilege on the server host.\n","LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE 'file_name.txt'\n    [REPLACE | IGNORE]\n    INTO TABLE tbl_name\n    [FIELDS\n        [TERMINATED BY '\\t']\n        [[OPTIONALLY] ENCLOSED BY '']\n        [ESCAPED BY '\\\\' ]\n    ]\n    [LINES \n        [STARTING BY '']    \n        [TERMINATED BY '\\n']\n    ]\n    [IGNORE number LINES]\n    [(col_name,...)]"),(287,3,"MPOINTFROMTEXT","   MPointFromText(wkt[,srid])\n   MultiPointFromText(wkt[,srid])\nConstructs a MULTIPOINT value using its WKT representation and SRID.\n",""),(288,1,"BLOB","A BLOB is a binary large object that can hold a variable amount of\ndata.  The four BLOB types TINYBLOB, BLOB,\nMEDIUMBLOB, and LONGBLOB differ only in the maximum length of\nthe values they can hold.\n",""),(289,1,"CHAR","   [NATIONAL] CHAR(M) [BINARY | ASCII | UNICODE]\n\nA fixed-length string that is always right-padded with spaces to the\nspecified length when stored. The range of M is 0 to 255 characters\n(1 to 255 prior to MySQL Version 3.23).\nTrailing spaces are removed when the value is retrieved. CHAR values\nare sorted and compared in case-insensitive fashion according to the\ndefault character set unless the BINARY keyword is given.\n\nFrom version 4.1.0, if the M value specified is greater than 255,\nthe column type is converted to TEXT.\nThis is a compatibility feature.\n\nNATIONAL CHAR (or its equivalent short form, NCHAR) is the\nSQL-99 way to define that a CHAR column should use the default\nCHARACTER set.  This is the default in MySQL.\n\nCHAR is a shorthand for CHARACTER.\n\nFrom version 4.1.0, the ASCII attribute can be specified which \nassigns the latin1 character set to a CHAR column.\n\nFrom version 4.1.1, the UNICODE attribute can be specified which \nassigns the ucs2 character set to a CHAR column.\n\nMySQL allows you to create a column of type\nCHAR(0). This is mainly useful when you have to be compliant with\nsome old applications that depend on the existence of a column but that do not\nactually use the value.  This is also quite nice when you need a\ncolumn that only can take 2 values: A CHAR(0), that is not defined\nas NOT NULL, will occupy only one bit and can take only 2 values:\nNULL or \"\". See also : [CHAR, , CHAR].\n\n   CHAR\nThis is a synonym for CHAR(1).\n",""),(290,14,"UTC_DATE","   UTC_DATE\n   UTC_DATE()\nReturns the current UTC date as a value in 'YYYY-MM-DD' or\nYYYYMMDD format, depending on whether the function is used in a\nstring or numeric context:\n","mysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n        -> '2003-08-14', 20030814"),(291,18,"DIMENSION","   Dimension(g)\nReturns the inherent dimension of the geometry value g. The result\ncan be @minus{}1, 0, 1, or 2. (The meaning of these values is given in\n[GIS class geometry].)\n","mysql> SELECT Dimension(GeomFromText('LineString(1 1,2 2)'));\n+------------------------------------------------+\n| Dimension(GeomFromText('LineString(1 1,2 2)')) |\n+------------------------------------------------+\n|                                              1 |\n+------------------------------------------------+"),(292,12,"COUNT DISTINCT","   COUNT(DISTINCT expr,[expr...])\nReturns a count of the number of different non-NULL values:\n","mysql> SELECT COUNT(DISTINCT results) FROM student;"),(293,11,"EQUALS","   Equals(g1,g2)\nReturns 1 or 0 to indicate whether or not g1 is spatially equal to\ng2.\n",""),(294,0,"CENTROID","   Centroid(poly)\nReturns the mathematical centroid for the Polygon value poly\nas a Point.  The result is not guaranteed to be on the polygon.\n",""),(295,24,"INTERVAL","   INTERVAL(N,N1,N2,N3,...)\nReturns 0 if N < N1, 1 if N < N2\nand so on or -1 if N is NULL. All arguments are treated\nas integers.  It is required that N1 < N2 < N3 < \n... < Nn for this function to work correctly. This is because\na binary search is used (very fast):\n","mysql> SELECT INTERVAL(23, 1, 15, 17, 30, 44, 200);\n        -> 3\nmysql> SELECT INTERVAL(10, 1, 10, 100, 1000);\n        -> 2\nmysql> SELECT INTERVAL(22, 23, 30, 44, 200);\n        -> 0"),(296,14,"FROM_DAYS","   FROM_DAYS(N)\nGiven a daynumber N, returns a DATE value:\n","mysql> SELECT FROM_DAYS(729669);\n        -> '1997-10-07'"),(297,25,"BIT_COUNT","   BIT_COUNT(N)\nReturns the number of bits that are set in the argument N:\n","mysql> SELECT BIT_COUNT(29);\n        -> 4"),(298,14,"UTC_TIMESTAMP","   UTC_TIMESTAMP\n   UTC_TIMESTAMP()\nReturns the current UTC date and time as a value in 'YYYY-MM-DD HH:MM:SS'\nor YYYYMMDDHHMMSS format, depending on whether the function is used in\na string or numeric context:\n","mysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n        -> '2003-08-14 18:08:04', 20030814180804"),(299,4,"+","   +\nAddition:\n","mysql> SELECT 3+5;\n        -> 8");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (300,20,"INET_NTOA","   INET_NTOA(expr)\nGiven a numeric network address (4 or 8 byte), returns the dotted-quad\nrepresentation of the address as a string:\n","mysql> SELECT INET_NTOA(3520061480);\n       ->  \"209.207.224.40\""),(301,4,"ACOS","   ACOS(X)\nReturns the arc cosine of X, that is, the value whose cosine is\nX. Returns NULL if X is not in the range -1 to\n1:\n","mysql> SELECT ACOS(1);\n        -> 0.000000\nmysql> SELECT ACOS(1.0001);\n        -> NULL\nmysql> SELECT ACOS(0);\n        -> 1.570796"),(302,10,"ISOLATION","SET [GLOBAL | SESSION] TRANSACTION ISOLATION LEVEL\n{ READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE }\n\nSets the transaction isolation level for the global, whole session or\nthe next transaction.\n\nThe default behaviour is to set the isolation level for the next (not\nstarted) transaction.  If you use the GLOBAL keyword, the statement\nsets the default transaction level globally for all new connections\ncreated from that point on (but not existing connections).\nYou need the SUPER\nprivilege to do this.  Using the SESSION keyword sets the\ndefault transaction level for all future transactions performed on the\ncurrent connection.\n\nFor description of each InnoDB transaction isolation level, see\n[InnoDB transaction isolation].  InnoDB supports each of these levels\nfrom MySQL 4.0.5 on. The default level is REPEATABLE READ.\n\nYou can set the default global isolation level for mysqld with\n--transaction-isolation=.... See also : [Command-line options].\n",""),(303,4,"CEILING","   CEILING(X)\n   CEIL(X)\nReturns the smallest integer value not less than X:\n","mysql> SELECT CEILING(1.23);\n        -> 2\nmysql> SELECT CEIL(-1.23);\n        -> -1"),(304,4,"SIN","   SIN(X)\nReturns the sine of X, where X is given in radians:\n","mysql> SELECT SIN(PI());\n        -> 0.000000"),(305,14,"DAYOFWEEK","   DAYOFWEEK(date)\nReturns the weekday index\nfor date (1 = Sunday, 2 = Monday, ... 7 =\nSaturday).  These index values correspond to the ODBC standard.\n","mysql> SELECT DAYOFWEEK('1998-02-03');\n        -> 3"),(306,13,"LINEFROMWKB","   LineFromWKB(wkb[,srid])\n   LineStringFromWKB(wkb[,srid])\nConstructs a LINESTRING value using its WKB representation and SRID.\n",""),(307,18,"GEOMETRYTYPE","   GeometryType(g)\nReturns as a string the name of the geometry type of which\nthe geometry instance g is a member.\nThe name will correspond to one of the instantiable Geometry subclasses.\n","mysql> SELECT GeometryType(GeomFromText('POINT(1 1)'));\n+------------------------------------------+\n| GeometryType(GeomFromText('POINT(1 1)')) |\n+------------------------------------------+\n| POINT                                    |\n+------------------------------------------+"),(308,7,"GRANT TYPES","For the GRANT and REVOKE statements, priv_type may be\nspecified as any of the following:\n\n     ALL [PRIVILEGES] 	 Sets all simple privileges except WITH GRANT OPTION\n   ALTER  	 Allows usage of ALTER TABLE\n   CREATE 	 Allows usage of CREATE TABLE\n   CREATE TEMPORARY TABLES 	 Allows usage of CREATE TEMPORARY TABLE\n   DELETE 	 Allows usage of DELETE\n   DROP 	 Allows usage of DROP TABLE.\n   EXECUTE 	 Allows the user to run stored procedures (MySQL 5.0)\n   FILE 	 Allows usage of SELECT ... INTO OUTFILE and LOAD DATA INFILE.\n   INDEX 	 Allows usage of CREATE INDEX and DROP INDEX\n   INSERT 	 Allows usage of INSERT\n   LOCK TABLES 	 Allows usage of LOCK TABLES on tables for which one has the SELECT privilege.\n   PROCESS 	 Allows usage of SHOW FULL PROCESSLIST\n   REFERENCES 	 For the future\n   RELOAD 	 Allows usage of FLUSH\n   REPLICATION CLIENT 	 Gives the right to the user to ask where the slaves/masters are.\n   REPLICATION SLAVE 	 Needed for the replication slaves (to read binlogs from master).\n   SELECT 	 Allows usage of SELECT\n   SHOW DATABASES 	 SHOW DATABASES shows all databases.\n   SHUTDOWN 	 Allows usage of mysqladmin shutdown\n   SUPER 	 Allows one connect (once) even if\nmax_connections is reached and execute commands CHANGE MASTER,\nKILL thread, mysqladmin debug, PURGE MASTER LOGS and SET GLOBAL\n   UPDATE 	 Allows usage of UPDATE\n   USAGE 	 Synonym for ``no privileges.''\n   GRANT OPTION 	 Synonym for WITH GRANT OPTION\n  \n",""),(309,22,"TRIM","   TRIM([[BOTH | LEADING | TRAILING] [remstr] FROM] str)\nReturns the string str with all remstr prefixes and/or suffixes\nremoved. If none of the specifiers BOTH, LEADING or\nTRAILING are given, BOTH is assumed. If remstr is not\nspecified, spaces are removed:\n","mysql> SELECT TRIM('  bar   ');\n        -> 'bar'\nmysql> SELECT TRIM(LEADING 'x' FROM 'xxxbarxxx');\n        -> 'barxxx'\nmysql> SELECT TRIM(BOTH 'x' FROM 'xxxbarxxx');\n        -> 'bar'\nmysql> SELECT TRIM(TRAILING 'xyz' FROM 'barxxyz');\n        -> 'barx'"),(310,14,"GET_FORMAT","   GET_FORMAT(DATE | TIME | TIMESTAMP, 'EUR' | 'USA' | 'JIS' | 'ISO' | 'INTERNAL')\nReturns a format string. This function is useful in combination with the \nDATE_FORMAT() and the STR_TO_DATE() functions, and when setting \nthe server variables DATE_FORMAT, TIME_FORMAT, and \nDATETIME_FORMAT. The three possible values for the first argument \nand the five possible values for the second argument result in 15 possible \nformat strings (for the specifiers used, see the table in the \nDATE_FORMAT() function description):\n     Function call 	 Result\n   GET_FORMAT(DATE,'USA') 	 '%m.%d.%Y'\n   GET_FORMAT(DATE,'JIS') 	 '%Y-%m-%d'\n   GET_FORMAT(DATE,'ISO') 	 '%Y-%m-%d'\n   GET_FORMAT(DATE,'EUR') 	 '%d.%m.%Y'\n   GET_FORMAT(DATE,'INTERNAL') 	 '%Y%m%d'\n   GET_FORMAT(TIMESTAMP,'USA') 	 '%Y-%m-%d-%H.%i.%s'\n   GET_FORMAT(TIMESTAMP,'JIS') 	 '%Y-%m-%d %H:%i:%s'\n   GET_FORMAT(TIMESTAMP,'ISO') 	 '%Y-%m-%d %H:%i:%s'\n   GET_FORMAT(TIMESTAMP,'EUR') 	 '%Y-%m-%d-%H.%i.%s'\n   GET_FORMAT(TIMESTAMP,'INTERNAL') 	 '%Y%m%d%H%i%s'\n   GET_FORMAT(TIME,'USA') 	 '%h:%i:%s %p'\n   GET_FORMAT(TIME,'JIS') 	 '%H:%i:%s'\n   GET_FORMAT(TIME,'ISO') 	 '%H:%i:%s'\n   GET_FORMAT(TIME,'EUR') 	 '%H.%i.%S'\n   GET_FORMAT(TIME,'INTERNAL') 	 '%H%i%s'\n  \nISO format is ISO 9075, not ISO 8601.\n","mysql> SELECT DATE_FORMAT('2003-10-03', GET_FORMAT(DATE, 'EUR')\n        -> '03.10.2003'\nmysql> SELECT STR_TO_DATE('10.31.2003', GET_FORMAT(DATE, 'USA'))\n        -> 2003-10-31\nmysql> SET DATE_FORMAT=GET_FORMAT(DATE, 'USA'); SELECT '2003-10-31';\n        -> 10-31-2003"),(311,1,"TINYBLOB","   TINYBLOB\n   TINYTEXT\n\nA BLOB or TEXT column with a maximum length of 255 (2^8 - 1)\ncharacters. See also : [Silent column changes]. See also : [BLOB].\n",""),(312,10,"SAVEPOINT","","SAVEPOINT identifier"),(313,9,"IF","   IF(expr1,expr2,expr3)\nIf expr1 is TRUE (expr1 <> 0 and expr1 <> NULL) then\nIF() returns expr2, else it returns expr3.\nIF() returns a numeric or string value, depending on the context\nin which it is used:\n","mysql> SELECT IF(1>2,2,3);\n        -> 3\nmysql> SELECT IF(1<2,'yes','no');\n        -> 'yes'\nmysql> SELECT IF(STRCMP('test','test1'),'no','yes');\n        -> 'no'"),(314,7,"PURGE","","PURGE MASTER LOGS TO 'mysql-bin.010';\nPURGE MASTER LOGS BEFORE '2003-04-02 22:46:26';");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (315,13,"MPOINTFROMWKB","   MPointFromWKB(wkb[,srid])\n   MultiPointFromWKB(wkb[,srid])\nConstructs a MULTIPOINT value using its WKB representation and SRID.\n",""),(316,26,"ALTER TABLE","ALTER TABLE allows you to change the structure of an existing table.\nFor example, you can add or delete columns, create or destroy indexes, change\nthe type of existing columns, or rename columns or the table itself.  You can\nalso change the comment for the table and type of the table.\n","ALTER [IGNORE] TABLE tbl_name alter_specification [, alter_specification ...]\n\nalter_specification:\n    ADD [COLUMN] create_definition [FIRST | AFTER column_name ]\n  | ADD [COLUMN] (create_definition, create_definition,...)\n  | ADD INDEX [index_name] (index_col_name,...)\n  | ADD [CONSTRAINT [symbol]] PRIMARY KEY (index_col_name,...)\n  | ADD [CONSTRAINT [symbol]] UNIQUE [index_name] (index_col_name,...)\n  | ADD FULLTEXT [index_name] (index_col_name,...)\n  | ADD [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name,...)\n           [reference_definition]\n  | ALTER [COLUMN] col_name {SET DEFAULT literal | DROP DEFAULT}\n  | CHANGE [COLUMN] old_col_name create_definition\n           [FIRST | AFTER column_name]\n  | MODIFY [COLUMN] create_definition [FIRST | AFTER column_name]\n  | DROP [COLUMN] col_name\n  | DROP PRIMARY KEY\n  | DROP INDEX index_name\n  | DISABLE KEYS\n  | ENABLE KEYS\n  | RENAME [TO] new_tbl_name\n  | ORDER BY col\n  | CHARACTER SET character_set_name [COLLATE collation_name]\n  | table_options"),(317,21,"CHAR BYTE","CHAR BYTE is an alias for CHAR BINARY.\n",""),(318,7,"MERGE","MERGE tables are new in MySQL Version 3.23.25. The code\nis still in gamma, but should be reasonable stable.\n\nA MERGE table (also known as a MRG_MyISAM table) is a\ncollection of identical MyISAM tables that can be used as one.\nYou can only SELECT, DELETE, and UPDATE from the\ncollection of tables.  If you DROP the MERGE table, you\nare only dropping the MERGE specification.\n","CREATE TABLE t1 (a INT NOT NULL AUTO_INCREMENT PRIMARY KEY, message CHAR(20));\nCREATE TABLE t2 (a INT NOT NULL AUTO_INCREMENT PRIMARY KEY, message CHAR(20));\nINSERT INTO t1 (message) VALUES (\"Testing\"),(\"table\"),(\"t1\");\nINSERT INTO t2 (message) VALUES (\"Testing\"),(\"table\"),(\"t2\");\nCREATE TABLE total (a INT NOT NULL AUTO_INCREMENT, message CHAR(20), KEY(a))\n             TYPE=MERGE UNION=(t1,t2) INSERT_METHOD=LAST;\nSELECT * FROM total;"),(319,26,"CREATE TABLE","CREATE TABLE creates a table with the given name.\nRules for allowable table names are given in [Legal names].  \nBy default, the table is created in the current database.  \nAn error occurs if the table already exists, if there is no current database,\nor if the database does not exist.\n","CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name [(create_definition,...)]\n[table_options] [select_statement]\n\nor\n\nCREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name [(] LIKE old_tbl_name [)];\n\ncreate_definition:\n    col_name type [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT]\n            [[PRIMARY] KEY] [COMMENT 'string'] [reference_definition]\n  | [CONSTRAINT [symbol]] PRIMARY KEY (index_col_name,...)\n  | KEY [index_name] (index_col_name,...)\n  | INDEX [index_name] (index_col_name,...)\n  | [CONSTRAINT [symbol]] UNIQUE [INDEX] [index_name] (index_col_name,...)\n  | FULLTEXT [INDEX] [index_name] (index_col_name,...)\n  | [CONSTRAINT [symbol]] FOREIGN KEY [index_name] (index_col_name,...)\n            [reference_definition]\n  | CHECK (expr)\n\ntype:\n    TINYINT[(length)] [UNSIGNED] [ZEROFILL]\n  | SMALLINT[(length)] [UNSIGNED] [ZEROFILL]\n  | MEDIUMINT[(length)] [UNSIGNED] [ZEROFILL]\n  | INT[(length)] [UNSIGNED] [ZEROFILL]\n  | INTEGER[(length)] [UNSIGNED] [ZEROFILL]\n  | BIGINT[(length)] [UNSIGNED] [ZEROFILL]\n  | REAL[(length,decimals)] [UNSIGNED] [ZEROFILL]\n  | DOUBLE[(length,decimals)] [UNSIGNED] [ZEROFILL]\n  | FLOAT[(length,decimals)] [UNSIGNED] [ZEROFILL]\n  | DECIMAL(length,decimals) [UNSIGNED] [ZEROFILL]\n  | NUMERIC(length,decimals) [UNSIGNED] [ZEROFILL]\n  | CHAR(length) [BINARY | ASCII | UNICODE]\n  | VARCHAR(length) [BINARY]\n  | DATE\n  | TIME\n  | TIMESTAMP\n  | DATETIME\n  | TINYBLOB\n  | BLOB\n  | MEDIUMBLOB\n  | LONGBLOB\n  | TINYTEXT\n  | TEXT\n  | MEDIUMTEXT\n  | LONGTEXT\n  | ENUM(value1,value2,value3,...)\n  | SET(value1,value2,value3,...)\n\nindex_col_name:\n        col_name [(length)] [ASC | DESC]\n\nreference_definition:\n        REFERENCES tbl_name [(index_col_name,...)]\n                   [MATCH FULL | MATCH PARTIAL]\n                   [ON DELETE reference_option]\n                   [ON UPDATE reference_option]\n\nreference_option:\n        RESTRICT | CASCADE | SET NULL | NO ACTION | SET DEFAULT\n\ntable_options: table_option [table_option] ...\n\ntable_option:\n    TYPE = {BDB | HEAP | ISAM | InnoDB | MERGE | MRG_MYISAM | MYISAM }\n  | AUTO_INCREMENT = #\n  | AVG_ROW_LENGTH = #\n  | CHECKSUM = {0 | 1}\n  | COMMENT = 'string'\n  | MAX_ROWS = #\n  | MIN_ROWS = #\n  | PACK_KEYS = {0 | 1 | DEFAULT}\n  | PASSWORD = 'string'\n  | DELAY_KEY_WRITE = {0 | 1}\n  | ROW_FORMAT = { DEFAULT | DYNAMIC | FIXED | COMPRESSED }\n  | RAID_TYPE = { 1 | STRIPED | RAID0 } RAID_CHUNKS=#  RAID_CHUNKSIZE=#\n  | UNION = (table_name,[table_name...])\n  | INSERT_METHOD = { NO | FIRST | LAST }\n  | DATA DIRECTORY = 'absolute path to directory'\n  | INDEX DIRECTORY = 'absolute path to directory'\n  | DEFAULT CHARACTER SET character_set_name [COLLATE collation_name]\n\nselect_statement:\n    [IGNORE | REPLACE] [AS] SELECT ...     (Some legal select statement)"),(320,24,">","   >\nGreater than:\n","mysql> SELECT 2 > 2;\n        -> 0"),(321,14,"MICROSECOND","   MICROSECOND(expr)\n\nReturns the microseconds from the time or datetime expression expr as a\nnumber in the range from 0 to 999999.\n","mysql> SELECT MICROSECOND('12:00:00.123456');\n        -> 123456\nmysql> SELECT MICROSECOND('1997-12-31 23:59:59.000010');\n        -> 10"),(322,7,"ANALYZE","Analyse and store the key distribution for the table.  During the\nanalysis, the table is locked with a read lock.  This works on\nMyISAM and BDB tables.\n\nThis is equivalent to running myisamchk -a on the table.\n\nMySQL uses the stored key distribution to decide in which order\ntables should be joined when one does a join on something else than a\nconstant.\n","ANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name[,tbl_name...]"),(323,7,"CONSTRAINT","The syntax of a foreign key constraint definition in InnoDB:\n[CONSTRAINT [symbol]] FOREIGN KEY (index_col_name, ...)\n                  REFERENCES table_name (index_col_name, ...)\n                  [ON DELETE {CASCADE | SET NULL | NO ACTION\n                              | RESTRICT}]\n                  [ON UPDATE {CASCADE | SET NULL | NO ACTION\n                              | RESTRICT}]\n","CREATE TABLE product (category INT NOT NULL, id INT NOT NULL,\n                      price DECIMAL,\n                      PRIMARY KEY(category, id)) TYPE=INNODB;\nCREATE TABLE customer (id INT NOT NULL,\n                      PRIMARY KEY (id)) TYPE=INNODB;\nCREATE TABLE product_order (no INT NOT NULL AUTO_INCREMENT,\n                      product_category INT NOT NULL,\n                      product_id INT NOT NULL,\n                      customer_id INT NOT NULL,\n                      PRIMARY KEY(no),\n                      INDEX (product_category, product_id),\n                      FOREIGN KEY (product_category, product_id)\n                        REFERENCES product(category, id)\n                        ON UPDATE CASCADE ON DELETE RESTRICT,\n                      INDEX (customer_id),\n                      FOREIGN KEY (customer_id)\n                        REFERENCES customer(id)) TYPE=INNODB;"),(324,22,"FIELD","   FIELD(str,str1,str2,str3,...)\nReturns the index of str in the str1, str2,\nstr3, ... list.\nReturns 0 if str is not found.\nFIELD() is the complement of ELT():\n","mysql> SELECT FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo');\n        -> 2\nmysql> SELECT FIELD('fo', 'Hej', 'ej', 'Heja', 'hej', 'foo');\n        -> 0"),(325,14,"MAKETIME","   MAKETIME(hour,minute,second)\n\nReturns a time value calculated from the hour, minute, and\nsecond arguments.\n","mysql> SELECT MAKETIME(12,15,30);\n        -> '12:15:30'"),(326,12,"MIN MAX","   MIN(expr)\n   MAX(expr)\nReturns the minimum or maximum value of expr.  MIN() and\nMAX() may take a string argument; in such cases they return the\nminimum or maximum string value. See also : [MySQL indexes].\n","mysql> SELECT student_name, MIN(test_score), MAX(test_score)\n    ->        FROM student\n    ->        GROUP BY student_name;"),(327,14,"ADDDATE SUBDATE","   ADDDATE(date,INTERVAL expr type)\n   SUBDATE(date,INTERVAL expr type)\n   ADDDATE(expr,days)\n   SUBDATE(expr,days)\n\nWhen invoked with the INTERVAL form of the second argument,\nADDDATE() and SUBDATE() are synonyms for DATE_ADD() and\nDATE_SUB().\n\nmysql> SELECT DATE_ADD('1998-01-02', INTERVAL 31 DAY);\n        -> '1998-02-02'\nmysql> SELECT ADDDATE('1998-01-02', INTERVAL 31 DAY);\n        -> '1998-02-02'\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\nmysql> SELECT SUBDATE('1998-01-02', INTERVAL 31 DAY);\n        -> '1997-12-02'\n\nAs of MySQL 4.1.1, the second syntax is allowed, where expr is a date\nor datetime expression and days is the number of days to be added to or\nsubtracted from expr.\n\nmysql> SELECT ADDDATE('1998-01-02', 31);\n        -> '1998-02-02'\nmysql> SELECT SUBDATE('1998-01-02 12:00:00', 31);\n        -> '1997-12-02 12:00:00'\n",""),(328,1,"ENUM","   ENUM('value1','value2',...)\n\nAn enumeration.  A string object that can have only one value, chosen\nfrom the list of values 'value1', 'value2', ...,\nNULL or the special \"\" error value.  An ENUM can\nhave a maximum of 65535 distinct values. See also : [ENUM].\n",""),(329,20,"DATABASE","   DATABASE()\nReturns the current database name:\n","mysql> SELECT DATABASE();\n        -> 'test'");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (330,13,"POINTFROMWKB","   PointFromWKB(wkb[,srid])\nConstructs a POINT value using its WKB representation and SRID.\n",""),(331,4,"POWER","   POW(X,Y)\n   POWER(X,Y)\nReturns the value of X raised to the power of Y:\n","mysql> SELECT POW(2,2);\n        -> 4.000000\nmysql> SELECT POW(2,-2);\n        -> 0.250000"),(332,4,"ATAN","   ATAN(X)\nReturns the arc tangent of X, that is, the value whose tangent is\nX:\n","mysql> SELECT ATAN(2);\n        -> 1.107149\nmysql> SELECT ATAN(-2);\n        -> -1.107149"),(333,22,"STRCMP","   STRCMP(expr1,expr2)\nSTRCMP()\nreturns 0 if the strings are the same, -1 if the first\nargument is smaller than the second according to the current sort order,\nand 1 otherwise:\n","mysql> SELECT STRCMP('text', 'text2');\n        -> -1\nmysql> SELECT STRCMP('text2', 'text');\n        -> 1\nmysql> SELECT STRCMP('text', 'text');\n        -> 0"),(334,6,"INSERT DELAYED","The DELAYED option for the INSERT statement is a\nMySQL-specific option that is very useful if you have clients\nthat can't wait for the INSERT to complete.  This is a common\nproblem when you use MySQL for logging and you also\nperiodically run SELECT and UPDATE statements that take a\nlong time to complete.  DELAYED was introduced in MySQL\nVersion 3.22.15.  It is a MySQL extension to SQL-92.\n\nINSERT DELAYED only works with ISAM and MyISAM\ntables.  Note that as MyISAM tables supports concurrent\nSELECT and INSERT, if there is no free blocks in the\nmiddle of the datafile, you very seldom need to use INSERT\nDELAYED with MyISAM. See also : [MyISAM].\n","INSERT DELAYED ..."),(335,4,"LN","   LN(X)\nReturns the natural logarithm of X:\n","mysql> SELECT LN(2);\n        -> 0.693147\nmysql> SELECT LN(-2);\n        -> NULL"),(336,4,"LOG","   LOG(X)\n   LOG(B,X)\nIf called with one parameter, this function returns the natural logarithm\nof X:\n","mysql> SELECT LOG(2);\n        -> 0.693147\nmysql> SELECT LOG(-2);\n        -> NULL"),(337,7,"SET SQL_LOG_BIN","SET SQL_LOG_BIN = {0|1}\n\nDisables or enables binary logging for the current connection \n(SQL_LOG_BIN is a session variable)\nif the client connects using an account that has the SUPER privilege.\nThe statement is ignored if the client does not have that privilege.\n",""),(338,24,"!=","   <>\n   !=\nNot equal:\n","mysql> SELECT '.01' <> '0.01';\n        -> 1\nmysql> SELECT .01 <> '0.01';\n        -> 0\nmysql> SELECT 'zapp' <> 'zappp';\n        -> 1"),(339,20,"AES_DECRYPT","   AES_ENCRYPT(string,key_string)\n   AES_DECRYPT(string,key_string)\nThese functions allow encryption/decryption of data using the official\nAES (Advanced Encryption Standard) algorithm, previously known as Rijndael.\nEncoding with a 128-bit key length is used, but you can extend it up to\n256 bits by modifying the source. We chose 128 bits because it is much\nfaster and it is usually secure enough.\n\nThe input arguments may be any length. If either argument is NULL,\nthe result of this function is also NULL.\n\nAs AES is a block-level algorithm, padding is used to encode uneven length\nstrings and so the result string length may be calculated as\n16*(trunc(string_length/16)+1).\n\nIf AES_DECRYPT() detects invalid data or incorrect padding, it\nreturns NULL. However, it is possible for AES_DECRYPT()\nto return a non-NULL value (possibly garbage) if the input data or\nthe key are invalid.\n\nYou can use the AES functions to store data in an encrypted form by\nmodifying your queries:\n","INSERT INTO t VALUES (1,AES_ENCRYPT('text','password'));"),(340,14,"DAYNAME","   DAYNAME(date)\nReturns the name of the weekday for date:\n","mysql> SELECT DAYNAME('1998-02-05');\n        -> 'Thursday'"),(341,1,"INT","   INT[(M)] [UNSIGNED] [ZEROFILL]\n\nA normal-size integer. The signed range is -2147483648 to\n2147483647.  The unsigned range is 0 to 4294967295.\n\n   INTEGER[(M)] [UNSIGNED] [ZEROFILL]\n\nThis is a synonym for INT.\n",""),(342,22,"RLIKE","   expr REGEXP pat\n   expr RLIKE pat\nPerforms a pattern match of a string expression expr against a pattern\npat.  The pattern can be an extended regular expression.\nSee also : [Regexp].  Returns 1 if expr matches pat, otherwise\nreturns 0.  RLIKE is a synonym for REGEXP, provided for\nmSQL compatibility. Note: Because MySQL uses the C escape\nsyntax in strings (for example, \\n), you must double any \\ that\nyou use in your REGEXP strings.  As of MySQL Version 3.23.4,\nREGEXP is case-insensitive for normal (not binary) strings:\n","mysql> SELECT 'Monty!' REGEXP 'm%y%%';\n        -> 0\nmysql> SELECT 'Monty!' REGEXP '.*';\n        -> 1\nmysql> SELECT 'new*\\n*line' REGEXP 'new\\\\*.\\\\*line';\n        -> 1\nmysql> SELECT \"a\" REGEXP \"A\", \"a\" REGEXP BINARY \"A\";\n        -> 1  0\nmysql> SELECT \"a\" REGEXP \"^[a-d]\";\n        -> 1"),(343,17,"GLENGTH","   GLength(ls)\nReturns as a double-precision number the length of the LineString\nvalue ls in its associated spatial reference.\n","mysql> SELECT GLength(GeomFromText('LineString(1 1,2 2,3 3)'));\n+--------------------------------------------------+\n| GLength(GeomFromText('LineString(1 1,2 2,3 3)')) |\n+--------------------------------------------------+\n|                                  2.8284271247462 |\n+--------------------------------------------------+"),(344,4,"RADIANS","   RADIANS(X)\nReturns the argument X, converted from degrees to radians:\n","mysql> SELECT RADIANS(90);\n        -> 1.570796");
insert into help_topic (help_topic_id,help_category_id,name,description,example) values (345,24,"COALESCE","   COALESCE(list)\nReturns first non-NULL element in list:\n","mysql> SELECT COALESCE(NULL,1);\n        -> 1\nmysql> SELECT COALESCE(NULL,NULL,NULL);\n        -> NULL"),(346,14,"DATEDIFF TIMEDIFF","   DATEDIFF(expr,expr2)\n   TIMEDIFF(expr,expr2)\n\n\nDATEDIFF() returns the number of days between the start date\nexpr and the end date expr2.\nexpr and expr2 are date or date-and-time expressions.\nOnly the date parts of the values are used in the calculation.\n\nTIMEDIFF() returns the time between the start time\nexpr and the end time expr2.\nexpr and expr2 are time or date-and-time expressions, but both\nmust be of the same type.\n","mysql> SELECT DATEDIFF('1997-12-31 23:59:59','1997-12-30');\n        -> 1\nmysql> SELECT DATEDIFF('1997-11-31 23:59:59','1997-12-31');\n        -> -30\nmysql> SELECT TIMEDIFF('2000:01:01 00:00:00', '2000:01:01 00:00:00.000001');\n        -> '-00:00:00.000001'\nmysql> SELECT TIMEDIFF('1997-12-31 23:59:59.000001','1997-12-30 01:01:01.000002');\n        -> '46:58:57.999999'"),(347,20,"VERSION","   VERSION()\nReturns a string indicating the MySQL server version:\n","mysql> SELECT VERSION();\n        -> '3.23.13-log'"),(348,22,"MAKE_SET","   MAKE_SET(bits,str1,str2,...)\nReturns a set (a string containing substrings separated by ,\ncharacters) consisting of the strings that have the corresponding bit in\nbits set.  str1 corresponds to bit 0, str2 to bit 1,\netc.  NULL strings in str1, str2, ...\nare not appended to the result:\n","mysql> SELECT MAKE_SET(1,'a','b','c');\n        -> 'a'\nmysql> SELECT MAKE_SET(1 | 4,'hello','nice','world');\n        -> 'hello,world'\nmysql> SELECT MAKE_SET(0,'a','b','c');\n        -> ''"),(349,22,"FIND_IN_SET","   FIND_IN_SET(str,strlist)\nReturns a value 1 to N if the string str is in the list\nstrlist consisting of N substrings. A string list is a string\ncomposed of substrings separated by , characters. If the first\nargument is a constant string and the second is a column of type SET,\nthe FIND_IN_SET() function is optimised to use bit arithmetic!\nReturns 0 if str is not in strlist or if strlist\nis the empty string.  Returns NULL if either argument is NULL.\nThis function will not work properly if the first argument contains a comma\n,:\n","mysql> SELECT FIND_IN_SET('b','a,b,c,d');\n        -> 2");

insert into help_keyword (help_keyword_id,name) values (0,"MIN"),(1,"JOIN"),(2,"SERIALIZABLE"),(3,"REPLACE"),(4,"RETURNS"),(5,"NCHAR"),(6,"MASTER_SSL_CA"),(7,"COLUMNS"),(8,"WORK"),(9,"DATETIME"),(10,"MODE"),(11,"INTEGER"),(12,"OPEN"),(13,"ESCAPE"),(14,"VALUE");
insert into help_keyword (help_keyword_id,name) values (15,"GEOMETRYCOLLECTIONFROMWKB"),(16,"DROP"),(17,"SQL_BIG_RESULT"),(18,"MONTH"),(19,"EVENTS"),(20,"REGEXP"),(21,"DUPLICATE"),(22,"LINESTRINGFROMTEXT."),(23,"UNLOCK"),(24,"REPLICATION"),(25,"INNODB"),(26,"YEAR_MONTH"),(27,"SUBJECT"),(28,"LOCK"),(29,"CHECK");
insert into help_keyword (help_keyword_id,name) values (30,"INT4"),(31,"FULL"),(32,"BY"),(33,"NO"),(34,"MINUTE"),(35,"DAY"),(36,"DATA"),(37,"RAID_CHUNKSIZE"),(38,"SHARE"),(39,"REAL"),(40,"SEPARATOR"),(41,"DELETE"),(42,"ON"),(43,"CHANGED"),(44,"CLOSE");
insert into help_keyword (help_keyword_id,name) values (45,"USE"),(46,"X509"),(47,"WHERE"),(48,"ADDTIME"),(49,"PRIVILEGES"),(50,"IGNORE"),(51,"SQL_BUFFER_RESULT"),(52,"SUPER"),(53,"QUICK"),(54,"SIGNED"),(55,"SECURITY"),(56,"FALSE"),(57,"POLYGONFROMWKB"),(58,"LEVEL"),(59,"FORCE");
insert into help_keyword (help_keyword_id,name) values (60,"BINARY"),(61,"TO"),(62,"CHANGE"),(63,"HOUR_MINUTE"),(64,"LCASE"),(65,"UPDATE"),(66,"INTO"),(67,"VARYING"),(68,"HOUR_SECOND"),(69,"ROLLBACK"),(70,"VARIABLE"),(71,"MAX"),(72,"RTREE"),(73,"PROCEDURE"),(74,"TIMESTAMP");
insert into help_keyword (help_keyword_id,name) values (75,"IMPORT"),(76,"AGAINST"),(77,"CHECKSUM"),(78,"INSERT"),(79,"COUNT"),(80,"THEN"),(81,"LONGBINARY"),(82,"DAY_SECOND"),(83,"EXISTS"),(84,"BOOLEAN"),(85,"MOD"),(86,"TINYTEXT"),(87,"DEFAULT"),(88,"TYPE"),(89,"NO_WRITE_TO_BINLOG");
insert into help_keyword (help_keyword_id,name) values (90,"RESET"),(91,"UCASE"),(92,"CURTIME"),(93,"BIGINT"),(94,"CHAR_LENGTH"),(95,"SET"),(96,"ISSUER"),(97,"DATE"),(98,"FULLTEXT"),(99,"STATUS"),(100,"COMMENT"),(101,"MASTER_CONNECT_RETRY"),(102,"INNER"),(103,"MRG_MYISAM"),(104,"MASTER_LOG_FILE");
insert into help_keyword (help_keyword_id,name) values (105,"STOP"),(106,"PRECISION"),(107,"TRAILING"),(108,"REQUIRE"),(109,"LONG"),(110,"OPTION"),(111,"ELSE"),(112,"IO_THREAD"),(113,"CIPHER"),(114,"FROM"),(115,"READ"),(116,"LEFT"),(117,"MINUTE_SECOND"),(118,"DEC"),(119,"FOR");
insert into help_keyword (help_keyword_id,name) values (120,"WARNINGS"),(121,"MIN_ROWS"),(122,"STRING"),(123,"FUNCTION"),(124,"ENCLOSED"),(125,"AGGREGATE"),(126,"FIELDS"),(127,"SUBDATE"),(128,"INT3"),(129,"ADD"),(130,"AVG_ROW_LENGTH"),(131,"LONGTEXT"),(132,"FLOAT4"),(133,"STRIPED"),(134,"REPEATABLE");
insert into help_keyword (help_keyword_id,name) values (135,"INFILE"),(136,"CHARACTER_LENGTH"),(137,"ORDER"),(138,"USING"),(139,"MIDDLEINT"),(140,"GRANT"),(141,"UNSIGNED"),(142,"DECIMAL"),(143,"GEOMETRYFROMTEXT"),(144,"INDEXES"),(145,"FOREIGN"),(146,"CACHE"),(147,"HOSTS"),(148,"COMMIT"),(149,"LEADING");
insert into help_keyword (help_keyword_id,name) values (150,"LOCALTIMESTAMP"),(151,"LOAD"),(152,"SQL_CACHE"),(153,"CONVERT"),(154,"DYNAMIC"),(155,"ADDDATE"),(156,"POLYGONFROMTEXT"),(157,"BYTE"),(158,"NEW"),(159,"LINESTRINGFROMWKB"),(160,"GLOBAL"),(161,"BERKELEYDB"),(162,"WHEN"),(163,"HAVING"),(164,"AS");
insert into help_keyword (help_keyword_id,name) values (165,"STARTING"),(166,"RELOAD"),(167,"AUTOCOMMIT"),(168,"REVOKE"),(169,"GRANTS"),(170,"OUTER"),(171,"FLOOR"),(172,"WITH"),(173,"AFTER"),(174,"STD"),(175,"DISABLE"),(176,"CSV"),(177,"LOW_PRIORITY"),(178,"OUTFILE"),(179,"BDB");
insert into help_keyword (help_keyword_id,name) values (180,"FILE"),(181,"SUBTIME"),(182,"SONAME"),(183,"POW"),(184,"MULTIPOINTFROMWKB"),(185,"INDEX"),(186,"MULTIPOINTFROMTEXT"),(187,"BACKUP"),(188,"NOW"),(189,"MULTILINESTRINGFROMWKB"),(190,"EXTENDED"),(191,"CROSS"),(192,"NATIONAL"),(193,"GROUP"),(194,"SYSDATE");
insert into help_keyword (help_keyword_id,name) values (195,"ZEROFILL"),(196,"CLIENT"),(197,"MASTER_PASSWORD"),(198,"RELAY_LOG_FILE"),(199,"TRUE"),(200,"CHARACTER"),(201,"MASTER_USER"),(202,"TABLE"),(203,"INSERT_METHOD"),(204,"CASCADE"),(205,"RELAY_LOG_POS"),(206,"SQL_CALC_FOUND_ROWS"),(207,"MYISAM"),(208,"MODIFY"),(209,"MATCH");
insert into help_keyword (help_keyword_id,name) values (210,"MASTER_LOG_POS"),(211,"DESC"),(212,"DISTINCTROW"),(213,"TIME"),(214,"SYSTEM_USER"),(215,"GEOMETRYCOLLECTIONFROMTEXT"),(216,"RAID_CHUNKS"),(217,"FLUSH"),(218,"CREATE"),(219,"ISAM"),(220,"MAX_UPDATES_PER_HOUR"),(221,"INT2"),(222,"PROCESSLIST"),(223,"LOGS"),(224,"HEAP");
insert into help_keyword (help_keyword_id,name) values (225,"SOUNDS"),(226,"BETWEEN"),(227,"MULTILINESTRINGFROMTEXT"),(228,"PACK_KEYS"),(229,"FAST"),(230,"VALUES"),(231,"VARCHARACTER"),(232,"SHOW"),(233,"ALL"),(234,"PARTIAL"),(235,"BINLOG"),(236,"END"),(237,"SECOND"),(238,"FLOAT8"),(239,"AND");
insert into help_keyword (help_keyword_id,name) values (240,"PREV"),(241,"HOUR"),(242,"SELECT"),(243,"DATABASES"),(244,"OR"),(245,"EXIST"),(246,"IDENTIFIED"),(247,"MASTER_SSL_CIPHER"),(248,"SQL_SLAVE_SKIP_COUNTER"),(249,"BOOL"),(250,"BOTH"),(251,"YEAR"),(252,"MASTER_PORT"),(253,"CONCURRENT"),(254,"UNIQUE");
insert into help_keyword (help_keyword_id,name) values (255,"PROCESS"),(256,"MASTER_SSL"),(257,"DATE_ADD"),(258,"MAX_CONNECTIONS_PER_HOUR"),(259,"LIKE"),(260,"COLUMN"),(261,"IN"),(262,"SESSION_USER"),(263,"DUMPFILE"),(264,"EXECUTE"),(265,"USAGE"),(266,"MEMORY"),(267,"CEIL"),(268,"QUERY"),(269,"MASTER_HOST");
insert into help_keyword (help_keyword_id,name) values (270,"LINES"),(271,"SQL_THREAD"),(272,"MAX_QUERIES_PER_HOUR"),(273,"MULTIPOLYGONFROMWKB"),(274,"MASTER_SSL_CERT"),(275,"TRANSACTION"),(276,"DAY_MINUTE"),(277,"DATE_SUB"),(278,"GEOMETRYFROMWKB"),(279,"RENAME"),(280,"INT1"),(281,"MAX_ROWS"),(282,"ALTER"),(283,"RIGHT"),(284,"STRAIGHT_JOIN");
insert into help_keyword (help_keyword_id,name) values (285,"NATURAL"),(286,"ESCAPED"),(287,"VARIABLES"),(288,"LOCALTIME"),(289,"SHA1"),(290,"RAID_TYPE"),(291,"PASSWORD"),(292,"CHAR"),(293,"OFFSET"),(294,"NEXT"),(295,"TEMPORARY"),(296,"SQL_LOG_BIN"),(297,"ERRORS"),(298,"COMMITTED"),(299,"SQL_SMALL_RESULT");
insert into help_keyword (help_keyword_id,name) values (300,"BIT"),(301,"BEGIN"),(302,"DELAY_KEY_WRITE"),(303,"MEDIUM"),(304,"INTERVAL"),(305,"SSL"),(306,"DAY_HOUR"),(307,"OCTET_LENGTH"),(308,"REFERENCES"),(309,"AES_ENCRYPT"),(310,"ISOLATION"),(311,"INT8"),(312,"RESTRICT"),(313,"UNCOMMITTED"),(314,"IS");
insert into help_keyword (help_keyword_id,name) values (315,"NOT"),(316,"COMPRESSED"),(317,"START"),(318,"IF"),(319,"PRIMARY"),(320,"INNOBASE"),(321,"LAST"),(322,"USER"),(323,"LIMIT"),(324,"KEYS"),(325,"KEY"),(326,"MERGE"),(327,"SQL_NO_CACHE"),(328,"DELAYED"),(329,"CONSTRAINT");
insert into help_keyword (help_keyword_id,name) values (330,"ACTION"),(331,"SERIAL"),(332,"CURDATE"),(333,"WRITE"),(334,"SESSION"),(335,"DATABASE"),(336,"NULL"),(337,"USE_FRM"),(338,"SLAVE"),(339,"TERMINATED"),(340,"MEDIUMTEXT"),(341,"ASC"),(342,"ENABLE"),(343,"OPTIONALLY"),(344,"DIRECTORY");
insert into help_keyword (help_keyword_id,name) values (345,"LOCAL"),(346,"DISTINCT"),(347,"MASTER_SSL_KEY"),(348,"MASTER_SERVER_ID"),(349,"NONE"),(350,"TABLES"),(351,"<>"),(352,"SHUTDOWN"),(353,"HIGH_PRIORITY"),(354,"BTREE"),(355,"FIRST"),(356,"TYPES"),(357,"RAID0"),(358,"FIXED"),(359,"MASTER");
insert into help_keyword (help_keyword_id,name) values (360,"MULTIPOLYGONFROMTEXT"),(361,"ROW_FORMAT");

insert into help_relation (help_topic_id,help_keyword_id) values (326,0),(242,1),(302,2),(286,3),(109,4),(289,5),(129,6),(233,7),(93,8),(257,9),(54,10),(242,10),(341,11),(109,11),(233,12);
insert into help_relation (help_topic_id,help_keyword_id) values (69,12),(260,13),(163,14),(71,15),(53,16),(109,16),(127,16),(189,16),(316,16),(242,17),(19,18),(233,19),(159,19),(342,20),(102,21);
insert into help_relation (help_topic_id,help_keyword_id) values (36,22),(22,23),(134,24),(319,25),(19,26),(134,27),(22,28),(242,28),(319,29),(341,30),(233,31),(319,31),(32,32),(319,32),(52,32);
insert into help_relation (help_topic_id,help_keyword_id) values (134,32),(242,32),(286,32),(247,32),(316,32),(323,33),(319,33),(19,34),(19,35),(77,36),(319,36),(286,36),(319,37),(242,38),(211,39);
insert into help_relation (help_topic_id,help_keyword_id) values (109,39),(247,40),(323,41),(319,41),(323,42),(0,42),(23,43),(69,44),(0,45),(134,46),(32,47),(52,47),(69,47),(158,48),(134,49);
insert into help_relation (help_topic_id,help_keyword_id) values (102,50),(0,50),(242,50),(286,50),(52,50),(316,50),(242,51),(134,52),(227,53),(32,53),(23,53),(257,54),(134,55),(263,56),(56,57);
insert into help_relation (help_topic_id,help_keyword_id) values (302,58),(0,59),(176,60),(289,60),(257,60),(129,61),(129,62),(316,62),(19,63),(12,64),(323,65),(102,65),(242,65),(102,66),(242,66);
insert into help_relation (help_topic_id,help_keyword_id) values (29,66),(176,67),(19,68),(93,69),(81,70),(326,71),(142,72),(242,73),(128,74),(62,74),(286,75),(54,76),(319,77),(102,78),(334,78);
insert into help_relation (help_topic_id,help_keyword_id) values (292,79),(89,80),(195,81),(19,82),(127,83),(189,83),(54,84),(14,84),(118,85),(311,86),(102,87),(319,87),(163,87),(316,87),(319,88);
insert into help_relation (help_topic_id,help_keyword_id) values (316,88),(322,89),(227,89),(74,89),(24,90),(99,90),(182,90),(39,91),(168,92),(149,93),(273,94),(93,95),(323,95),(126,95),(337,95);
insert into help_relation (help_topic_id,help_keyword_id) values (29,95),(52,95),(316,95),(134,96),(179,97),(82,97),(257,97),(19,97),(142,98),(319,98),(316,98),(233,99),(37,99),(150,99),(319,100);
insert into help_relation (help_topic_id,help_keyword_id) values (129,101),(0,102),(319,103),(129,104),(35,105),(211,106),(309,107),(134,108),(195,109),(134,110),(89,111),(35,112),(222,112),(134,113),(233,114);
insert into help_relation (help_topic_id,help_keyword_id) values (309,114),(77,114),(32,114),(242,114),(159,114),(246,114),(302,115),(22,115),(69,115),(0,116),(19,117),(215,118),(233,119),(242,119),(233,120);
insert into help_relation (help_topic_id,help_keyword_id) values (319,121),(109,122),(109,123),(286,124),(109,125),(233,126),(286,126),(327,127),(171,128),(38,129),(316,129),(319,130),(316,130),(195,131),(112,132);
insert into help_relation (help_topic_id,help_keyword_id) values (319,133),(302,134),(286,135),(273,136),(32,137),(242,137),(52,137),(316,137),(247,137),(0,138),(32,138),(171,139),(134,140),(211,141),(215,141);
insert into help_relation (help_topic_id,help_keyword_id) values (341,141),(14,141),(257,141),(112,141),(80,141),(215,142),(282,143),(233,144),(323,145),(319,145),(316,145),(99,146),(94,147),(233,147),(93,148);
insert into help_relation (help_topic_id,help_keyword_id) values (309,149),(6,150),(77,151),(286,151),(246,151),(242,152),(257,153),(319,154),(327,155),(271,156),(317,157),(233,158),(306,159),(81,160),(302,160);
insert into help_relation (help_topic_id,help_keyword_id) values (126,160),(319,161),(89,162),(242,163),(0,164),(22,164),(242,164),(286,165),(134,166),(93,167),(134,168),(233,169),(0,170),(149,171),(134,172);
insert into help_relation (help_topic_id,help_keyword_id) values (316,173),(279,174),(316,175),(286,176),(102,177),(22,177),(32,177),(286,177),(29,177),(52,177),(242,178),(319,179),(134,180),(158,181),(109,182);
insert into help_relation (help_topic_id,help_keyword_id) values (331,183),(315,184),(0,185),(233,185),(53,185),(38,185),(142,185),(319,185),(316,185),(287,186),(243,187),(6,188),(186,189),(227,190),(23,190);
insert into help_relation (help_topic_id,help_keyword_id) values (0,191),(176,192),(289,192),(242,193),(6,194),(211,195),(215,195),(341,195),(14,195),(112,195),(80,195),(134,196),(129,197),(129,198),(263,199);
insert into help_relation (help_topic_id,help_keyword_id) values (176,200),(289,200),(129,201),(233,202),(104,202),(23,202),(189,202),(74,202),(322,202),(227,202),(38,202),(243,202),(246,202),(319,203),(323,204);
insert into help_relation (help_topic_id,help_keyword_id) values (319,204),(189,204),(129,205),(242,206),(319,207),(316,208),(54,209),(129,210),(223,211),(242,211),(247,211),(242,212),(212,213),(256,213),(257,213);
insert into help_relation (help_topic_id,help_keyword_id) values (268,214),(166,215),(319,216),(99,217),(233,218),(103,218),(109,218),(38,218),(142,218),(319,218),(319,219),(134,220),(154,221),(233,222),(203,223);
insert into help_relation (help_topic_id,help_keyword_id) values (233,223),(319,224),(258,225),(95,226),(70,227),(319,228),(23,229),(29,230),(176,231),(94,232),(203,232),(37,232),(150,232),(159,232),(206,233);
insert into help_relation (help_topic_id,help_keyword_id) values (242,233),(134,233),(319,234),(159,235),(89,236),(19,237),(211,238),(95,239),(213,239),(69,240),(19,241),(29,242),(175,242),(233,243),(88,244);
insert into help_relation (help_topic_id,help_keyword_id) values (103,245),(134,246),(129,247),(126,248),(14,249),(309,250),(19,251),(129,252),(286,253),(316,254),(134,255),(129,256),(19,257),(134,258),(233,259);
insert into help_relation (help_topic_id,help_keyword_id) values (258,259),(316,260),(54,261),(242,261),(159,261),(268,262),(242,263),(134,264),(134,265),(242,266),(303,267),(99,268),(129,269),(286,270),(35,271);
insert into help_relation (help_topic_id,help_keyword_id) values (222,271),(134,272),(78,273),(129,274),(93,275),(302,275),(19,276),(19,277),(92,278),(316,279),(14,280),(319,281),(38,282),(316,282),(134,282);
insert into help_relation (help_topic_id,help_keyword_id) values (0,283),(0,284),(242,284),(0,285),(286,286),(233,287),(6,288),(194,289),(319,290),(134,291),(317,292),(257,292),(242,293),(69,294),(189,295);
insert into help_relation (help_topic_id,help_keyword_id) values (337,296),(233,297),(302,298),(242,299),(14,300),(93,301),(319,302),(23,303),(19,304),(134,305),(19,306),(273,307),(323,308),(319,308),(134,308);
insert into help_relation (help_topic_id,help_keyword_id) values (339,309),(302,310),(80,311),(323,312),(189,312),(302,313),(252,314),(103,315),(210,315),(319,316),(93,317),(222,317),(103,318),(127,318),(189,318);
insert into help_relation (help_topic_id,help_keyword_id) values (316,319),(319,320),(69,321),(268,322),(32,323),(242,323),(52,323),(159,323),(69,323),(233,324),(316,324),(323,325),(102,325),(38,325),(319,325);
insert into help_relation (help_topic_id,help_keyword_id) values (316,325),(319,326),(242,327),(102,328),(29,328),(334,328),(319,329),(316,329),(323,330),(319,330),(319,331),(163,331),(219,332),(22,333),(81,334);
insert into help_relation (help_topic_id,help_keyword_id) values (302,334),(103,335),(127,335),(323,336),(252,336),(227,337),(24,338),(94,338),(233,338),(150,338),(35,338),(222,338),(286,339),(41,340),(242,341);
insert into help_relation (help_topic_id,help_keyword_id) values (247,341),(316,342),(286,343),(319,344),(322,345),(227,345),(22,345),(286,345),(74,345),(292,346),(242,346),(247,346),(129,347),(233,348),(134,349);
insert into help_relation (help_topic_id,help_keyword_id) values (233,350),(22,350),(338,351),(134,352),(242,353),(142,354),(319,355),(316,355),(69,355),(233,356),(319,357),(215,358),(319,358),(203,359),(233,359);
insert into help_relation (help_topic_id,help_keyword_id) values (77,359),(37,359),(129,359),(182,359),(246,359),(133,360),(319,361);

